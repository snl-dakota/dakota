#@ On Windows: not sufficiently generic
#@ *: DakotaConfig=UNIX
#@ p*: Label=FastTest
#@ p0: MPIProcs=3
#@ p1: MPIProcs=2

# Tests: all use workdir named trydir
# 0	no extra options (script in inputdir, tmpnamed files)
# 1	tag the workdir
# 2	tag and save the workdir
# 3	template_files linked from trydir (check data file existence)
# 4	template_directory contents linked from trydir
# 5	template_files copied from trydir
# 6	template_directory contents copied from trydir
# 7	analysis driver located in template_directory
# 8	basic work_directory, but with named parameters file, stripping dirname
# 9	tagged and saved work_directory, with named and saved parameters file

# Inactive tests
# 10     test using environment variables to communicate the file names

# TODO: Add tests for:
# * driver lives on PATH, but not in inputdir
# * driver is a template file (not sure how to test since . should be a valid 
#   location)
# * named vs. anonymous work_directory
# * put a junk file and use replace to replace
# * put a good file and verify junk doesn't replace
# * asynch vs. synch
# * Test with trydir/subdir for workdir (currently requires mkdir trydir first)
# * Get autotagging working and test
# * Parallel testing: blocked for test > 1 as doesn't seem to find driver in pwd

method
  multidim_parameter_study		
    partitions = 2 2			

variables
  continuous_design = 2			
    lower_bounds    -2.0     -2.0	
    upper_bounds     2.0      2.0	
    descriptors      'x1'     'x2'	

interface
# TODO: Previously tests 4 and 6 didn't work with fork on Mac; now
# that they do, should mix and match tests with system and fork on all
# platforms
  system	#s0,#s2,#s4,#s6,#s8,#p0
#  fork		#s1,#s3,#s5,#s7,#s9,#p1
#    asynchronous evaluation_concurrency = 2	     	     	#s1,#s2,#s9,#p1
    analysis_driver = '@Python_EXECUTABLE@ dakota_workdir.py'			   #s0,#p0
#    analysis_driver = '@Python_EXECUTABLE@ dakota_workdir.py tag'		   #s1,#p1
#    analysis_driver = '@Python_EXECUTABLE@ dakota_workdir.py tag_save' 	   #s2
#    analysis_driver = '@Python_EXECUTABLE@ dakota_workdir.py templatefiles' 	   #s3
#    analysis_driver = '@Python_EXECUTABLE@ dakota_workdir.py templatedir' 	   #s4
#    analysis_driver = '@Python_EXECUTABLE@ dakota_workdir.py templatefiles_copy'  #s5
#    analysis_driver = '@Python_EXECUTABLE@ dakota_workdir.py templatedir_copy'    #s6
#    analysis_driver = '@Python_EXECUTABLE@ templatedir_rosenbrock.py' 		   #s7
#    analysis_driver = '@Python_EXECUTABLE@ dakota_workdir.py named_params' 	   #s8
#    analysis_driver = '@Python_EXECUTABLE@ dakota_workdir.py saved_params' 	   #s9
# Not yet active:
#    analysis_driver = '@Python_EXECUTABLE@ dakota_workdir.py -params $DAKOTA_PARAMETERS_FILE -results $DAKOTA_RESULTS_FILE'   NO 10
#      verbatim        			  	  		NO 10

    work_directory
      named 'trydir'
# TODO: disable tag for p0 depending on parallel concurrency
#	directory_tag						#s1,#s2,#s9,#p0,#p1
#	directory_save  					#s2,#s9
# 	link_files = 'dakota_workdir.root.dat' 			#s3
#	link_files = 'dakota_workdir.templatedir/*'		#s4,#s7
# The Python file must be in the workdir for the interpreter to find it...
        copy_files = 'dakota_workdir.py'	#s0,#s1,#s2,#s3,#s4,#s7,#s8,#s9,#p0,#p1
# 	copy_files = 'dakota_workdir.py' 'dakota_workdir.root.dat' 			#s5
#	copy_files = 'dakota_workdir.py' 'dakota_workdir.templatedir/*'		#s6
#	parameters_file = 'params.in'				#s8,#s9
#	  file_save						#s9
# Disabling absolute path since leaves files that may get in other users' way
#	parameters_file = '/tmp/params.in'			NO 9

responses
  objective_functions = 1             
  no_gradients				
  no_hessians
