KEYWORD01 environment {NIDRProblemDescDB::env_start}
  [ tabular_data ALIAS tabular_graphics_data {N_stm(true,tabularDataFlag)}
    [ tabular_data_file ALIAS tabular_graphics_file STRING {N_stm(str,tabularDataFile)} ]
    [ 
      ( custom_annotated {N_stm(utype,tabularFormat_TABULAR_NONE)}
        [ header {N_stm(augment_utype,tabularFormat_TABULAR_HEADER)} ]
        [ eval_id {N_stm(augment_utype,tabularFormat_TABULAR_EVAL_ID)} ]
        [ interface_id {N_stm(augment_utype,tabularFormat_TABULAR_IFACE_ID)} ]
       )
      |
      annotated {N_stm(utype,tabularFormat_TABULAR_ANNOTATED)}
      |
      freeform {N_stm(utype,tabularFormat_TABULAR_NONE)}
     ]
   ]
  [ output_file STRING {N_stm(str,outputFile)} ]
  [ error_file STRING {N_stm(str,errorFile)} ]
  [ read_restart STRING {N_stm(str,readRestart)}
    [ stop_restart INTEGER >= 0 {N_stm(int,stopRestart)} ]
   ]
  [ write_restart STRING {N_stm(str,writeRestart)} ]
  [ output_precision INTEGER >= 0 {N_stm(int,outputPrecision)} ]
  [ results_output {N_stm(true,resultsOutputFlag)}
    [ results_output_file STRING {N_stm(str,resultsOutputFile)} ]
    [ text {N_stm(augment_utype,resultsOutputFormat_RESULTS_OUTPUT_TEXT)} ]
    [ hdf5 {N_stm(augment_utype,resultsOutputFormat_RESULTS_OUTPUT_HDF5)}
      [ model_selection {0}
        top_method {N_stm(utype,modelEvalsSelection_MODEL_EVAL_STORE_TOP_METHOD)}
        |
        none {N_stm(utype,modelEvalsSelection_MODEL_EVAL_STORE_NONE)}
        |
        all_methods {N_stm(utype,modelEvalsSelection_MODEL_EVAL_STORE_ALL_METHODS)}
        |
        all {N_stm(utype,modelEvalsSelection_MODEL_EVAL_STORE_ALL)}
       ]
      [ interface_selection {0}
        none {N_stm(utype,interfEvalsSelection_INTERF_EVAL_STORE_NONE)}
        |
        simulation {N_stm(utype,interfEvalsSelection_INTERF_EVAL_STORE_SIMULATION)}
        |
        all {N_stm(utype,interfEvalsSelection_INTERF_EVAL_STORE_ALL)}
       ]
     ]
   ]
  [ graphics {N_stm(true,graphicsFlag)} ]
  [ check {N_stm(true,checkFlag)} ]
  [ pre_run {N_stm(true,preRunFlag)}
    [ input STRING {N_stm(str,preRunInput)} ]
    [ output STRING {N_stm(str,preRunOutput)}
      [ 
        ( custom_annotated {N_stm(utype,preRunOutputFormat_TABULAR_NONE)}
          [ header {N_stm(augment_utype,preRunOutputFormat_TABULAR_HEADER)} ]
          [ eval_id {N_stm(augment_utype,preRunOutputFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_stm(augment_utype,preRunOutputFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_stm(utype,preRunOutputFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_stm(utype,preRunOutputFormat_TABULAR_NONE)}
       ]
     ]
   ]
  [ run {N_stm(true,runFlag)}
    [ input STRING {N_stm(str,runInput)} ]
    [ output STRING {N_stm(str,runOutput)} ]
   ]
  [ post_run {N_stm(true,postRunFlag)}
    [ input STRING {N_stm(str,postRunInput)}
      [ 
        ( custom_annotated {N_stm(utype,postRunInputFormat_TABULAR_NONE)}
          [ header {N_stm(augment_utype,postRunInputFormat_TABULAR_HEADER)} ]
          [ eval_id {N_stm(augment_utype,postRunInputFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_stm(augment_utype,postRunInputFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_stm(utype,postRunInputFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_stm(utype,postRunInputFormat_TABULAR_NONE)}
       ]
     ]
    [ output STRING {N_stm(str,postRunOutput)} ]
   ]
  [ top_method_pointer ALIAS method_pointer STRING {N_stm(str,topMethodPointer)} ]

KEYWORD method {N_mdm3(start,0,stop)}
  [ id_method STRING {N_mdm(str,idMethod)} ]
  [ output {0}
    debug {N_mdm(type,methodOutput_DEBUG_OUTPUT)}
    |
    verbose {N_mdm(type,methodOutput_VERBOSE_OUTPUT)}
    |
    normal {N_mdm(type,methodOutput_NORMAL_OUTPUT)}
    |
    quiet {N_mdm(type,methodOutput_QUIET_OUTPUT)}
    |
    silent {N_mdm(type,methodOutput_SILENT_OUTPUT)}
   ]
  [ final_solutions INTEGER >= 0 {N_mdm(sizet,numFinalSolutions)} ]
  ( hybrid {N_mdm(utype,methodName_HYBRID)}
    ( sequential ALIAS uncoupled {N_mdm(utype,subMethod_SUBMETHOD_SEQUENTIAL)}
      ( method_name_list STRINGLIST {N_mdm(strL,hybridMethodNames)}
        [ model_pointer_list STRINGLIST {N_mdm(strL,hybridModelPointers)} ]
       )
      |
      method_pointer_list STRINGLIST {N_mdm(strL,hybridMethodPointers)}
      [ iterator_servers INTEGER > 0 {N_mdm(int,iteratorServers)} ]
      [ iterator_scheduling {0}
        master {N_mdm(type,iteratorScheduling_MASTER_SCHEDULING)}
        |
        peer {N_mdm(type,iteratorScheduling_PEER_SCHEDULING)}
       ]
      [ processors_per_iterator INTEGER > 0 {N_mdm(int,procsPerIterator)} ]
     )
    |
    ( embedded ALIAS coupled {N_mdm(utype,subMethod_SUBMETHOD_EMBEDDED)}
      ( global_method_name STRING {N_mdm(str,hybridGlobalMethodName)}
        [ global_model_pointer STRING {N_mdm(str,hybridGlobalModelPointer)} ]
       )
      |
      global_method_pointer STRING {N_mdm(str,hybridGlobalMethodPointer)}
      ( local_method_name STRING {N_mdm(str,hybridLocalMethodName)}
        [ local_model_pointer STRING {N_mdm(str,hybridLocalModelPointer)} ]
       )
      |
      local_method_pointer STRING {N_mdm(str,hybridLocalMethodPointer)}
      [ local_search_probability REAL {N_mdm(Real,hybridLSProb)} ]
      [ iterator_servers INTEGER > 0 {N_mdm(int,iteratorServers)} ]
      [ iterator_scheduling {0}
        master {N_mdm(type,iteratorScheduling_MASTER_SCHEDULING)}
        |
        peer {N_mdm(type,iteratorScheduling_PEER_SCHEDULING)}
       ]
      [ processors_per_iterator INTEGER > 0 {N_mdm(int,procsPerIterator)} ]
     )
    |
    ( collaborative {N_mdm(utype,subMethod_SUBMETHOD_COLLABORATIVE)}
      ( method_name_list STRINGLIST {N_mdm(strL,hybridMethodNames)}
        [ model_pointer_list STRINGLIST {N_mdm(strL,hybridModelPointers)} ]
       )
      |
      method_pointer_list STRINGLIST {N_mdm(strL,hybridMethodPointers)}
      [ iterator_servers INTEGER > 0 {N_mdm(int,iteratorServers)} ]
      [ iterator_scheduling {0}
        master {N_mdm(type,iteratorScheduling_MASTER_SCHEDULING)}
        |
        peer {N_mdm(type,iteratorScheduling_PEER_SCHEDULING)}
       ]
      [ processors_per_iterator INTEGER > 0 {N_mdm(int,procsPerIterator)} ]
     )
   )
  |
  ( multi_start {N_mdm(utype,methodName_MULTI_START)}
    ( method_name STRING {N_mdm(str,subMethodName)}
      [ model_pointer STRING {N_mdm(str,subModelPointer)} ]
     )
    |
    method_pointer STRING {N_mdm(str,subMethodPointer)}
    [ random_starts INTEGER {N_mdm(int,concurrentRandomJobs)}
      [ seed INTEGER {N_mdm(int,randomSeed)} ]
     ]
    [ starting_points REALLIST {N_mdm(RealDL,concurrentParameterSets)} ]
    [ iterator_servers INTEGER > 0 {N_mdm(int,iteratorServers)} ]
    [ iterator_scheduling {0}
      master {N_mdm(type,iteratorScheduling_MASTER_SCHEDULING)}
      |
      peer {N_mdm(type,iteratorScheduling_PEER_SCHEDULING)}
     ]
    [ processors_per_iterator INTEGER > 0 {N_mdm(int,procsPerIterator)} ]
   )
  |
  ( pareto_set {N_mdm(utype,methodName_PARETO_SET)}
    ( method_name ALIAS opt_method_name STRING {N_mdm(str,subMethodName)}
      [ model_pointer ALIAS opt_model_pointer STRING {N_mdm(str,subModelPointer)} ]
     )
    |
    method_pointer ALIAS opt_method_pointer STRING {N_mdm(str,subMethodPointer)}
    [ random_weight_sets INTEGER {N_mdm(int,concurrentRandomJobs)}
      [ seed INTEGER {N_mdm(int,randomSeed)} ]
     ]
    [ weight_sets ALIAS multi_objective_weight_sets REALLIST {N_mdm(RealDL,concurrentParameterSets)} ]
    [ iterator_servers INTEGER > 0 {N_mdm(int,iteratorServers)} ]
    [ iterator_scheduling {0}
      master {N_mdm(type,iteratorScheduling_MASTER_SCHEDULING)}
      |
      peer {N_mdm(type,iteratorScheduling_PEER_SCHEDULING)}
     ]
    [ processors_per_iterator INTEGER > 0 {N_mdm(int,procsPerIterator)} ]
   )
  |
  ( branch_and_bound {N_mdm(utype,methodName_BRANCH_AND_BOUND)}
    method_pointer STRING {N_mdm(str,subMethodPointer)}
    |
    ( method_name STRING {N_mdm(str,subMethodName)}
      [ model_pointer STRING {N_mdm(str,modelPointer)} ]
     )
    [ scaling {N_mdm(true,methodScaling)} ]
   )
  |
  ( surrogate_based_local {N_mdm(utype,methodName_SURROGATE_BASED_LOCAL)}
    method_pointer ALIAS approx_method_pointer STRING {N_mdm(str,subMethodPointer)}
    |
    method_name ALIAS approx_method_name STRING {N_mdm(str,subMethodName)}
    model_pointer ALIAS approx_model_pointer STRING {N_mdm(str,modelPointer)}
    [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
    [ truth_surrogate_bypass {N_mdm(true,surrBasedLocalLayerBypass)} ]
    [ approx_subproblem {0}
      original_primary {N_mdm(type,surrBasedLocalSubProbObj_ORIGINAL_PRIMARY)}
      |
      single_objective {N_mdm(type,surrBasedLocalSubProbObj_SINGLE_OBJECTIVE)}
      |
      augmented_lagrangian_objective {N_mdm(type,surrBasedLocalSubProbObj_AUGMENTED_LAGRANGIAN_OBJECTIVE)}
      |
      lagrangian_objective {N_mdm(type,surrBasedLocalSubProbObj_LAGRANGIAN_OBJECTIVE)}
      original_constraints {N_mdm(type,surrBasedLocalSubProbCon_ORIGINAL_CONSTRAINTS)}
      |
      linearized_constraints {N_mdm(type,surrBasedLocalSubProbCon_LINEARIZED_CONSTRAINTS)}
      |
      no_constraints {N_mdm(type,surrBasedLocalSubProbCon_NO_CONSTRAINTS)}
     ]
    [ merit_function {0}
      penalty_merit {N_mdm(type,surrBasedLocalMeritFn_PENALTY_MERIT)}
      |
      adaptive_penalty_merit {N_mdm(type,surrBasedLocalMeritFn_ADAPTIVE_PENALTY_MERIT)}
      |
      lagrangian_merit {N_mdm(type,surrBasedLocalMeritFn_LAGRANGIAN_MERIT)}
      |
      augmented_lagrangian_merit {N_mdm(type,surrBasedLocalMeritFn_AUGMENTED_LAGRANGIAN_MERIT)}
     ]
    [ acceptance_logic {0}
      tr_ratio {N_mdm(type,surrBasedLocalAcceptLogic_TR_RATIO)}
      |
      filter {N_mdm(type,surrBasedLocalAcceptLogic_FILTER)}
     ]
    [ constraint_relax {0}
      homotopy {N_mdm(type,surrBasedLocalConstrRelax_HOMOTOPY)}
     ]
    [ trust_region {0,0,NIDRProblemDescDB::method_tr_final}
      [ initial_size REALLIST {N_mdm(RealDL,trustRegionInitSize)} ]
      [ minimum_size REAL {N_mdm(Real,trustRegionMinSize)} ]
      [ contract_threshold REAL {N_mdm(Real,trustRegionContractTrigger)} ]
      [ expand_threshold REAL {N_mdm(Real,trustRegionExpandTrigger)} ]
      [ contraction_factor REAL {N_mdm(Real,trustRegionContract)} ]
      [ expansion_factor REAL {N_mdm(Real,trustRegionExpand)} ]
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
   )
  |
  ( surrogate_based_global {N_mdm(utype,methodName_SURROGATE_BASED_GLOBAL)}
    method_pointer ALIAS approx_method_pointer STRING {N_mdm(str,subMethodPointer)}
    |
    method_name ALIAS approx_method_name STRING {N_mdm(str,subMethodName)}
    model_pointer ALIAS approx_model_pointer STRING {N_mdm(str,modelPointer)}
    [ replace_points {N_mdm(true,surrBasedGlobalReplacePts)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
   )
  |
  ( dot_frcg {N_mdm(utype,methodName_DOT_FRCG)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( dot_mmfd {N_mdm(utype,methodName_DOT_MMFD)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( dot_bfgs {N_mdm(utype,methodName_DOT_BFGS)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( dot_slp {N_mdm(utype,methodName_DOT_SLP)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( dot_sqp {N_mdm(utype,methodName_DOT_SQP)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( conmin_frcg {N_mdm(utype,methodName_CONMIN_FRCG)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( conmin_mfd {N_mdm(utype,methodName_CONMIN_MFD)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( dl_solver STRING {N_mdm(utype_lit,TYPE_DATA_methodName_DL_SOLVER)}
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( npsol_sqp {N_mdm(utype,methodName_NPSOL_SQP)}
    [ verify_level INTEGER {N_mdm(int,verifyLevel)} ]
    [ function_precision REAL {N_mdm(Real,functionPrecision)} ]
    [ linesearch_tolerance REAL {N_mdm(Real,lineSearchTolerance)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( nlssol_sqp {N_mdm(utype,methodName_NLSSOL_SQP)}
    [ verify_level INTEGER {N_mdm(int,verifyLevel)} ]
    [ function_precision REAL {N_mdm(Real,functionPrecision)} ]
    [ linesearch_tolerance REAL {N_mdm(Real,lineSearchTolerance)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( nlpql_sqp {N_mdm(utype,methodName_NLPQL_SQP)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( optpp_cg {N_mdm(utype,methodName_OPTPP_CG)}
    [ max_step REAL {N_mdm(Real,maxStep)} ]
    [ gradient_tolerance REAL {N_mdm(Real,gradientTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( optpp_q_newton {N_mdm(utype,methodName_OPTPP_Q_NEWTON)}
    [ search_method {0}
      value_based_line_search {N_mdm(lit,searchMethod_value_based_line_search)}
      |
      gradient_based_line_search {N_mdm(lit,searchMethod_gradient_based_line_search)}
      |
      trust_region {N_mdm(lit,searchMethod_trust_region)}
      |
      tr_pds {N_mdm(lit,searchMethod_tr_pds)}
     ]
    [ merit_function {0}
      el_bakry {N_mdm(type,meritFn_NormFmu)}
      |
      argaez_tapia {N_mdm(type,meritFn_ArgaezTapia)}
      |
      van_shanno {N_mdm(type,meritFn_VanShanno)}
     ]
    [ steplength_to_boundary REAL {N_mdm(Real,stepLenToBoundary)} ]
    [ centering_parameter REAL {N_mdm(Real,centeringParam)} ]
    [ max_step REAL {N_mdm(Real,maxStep)} ]
    [ gradient_tolerance REAL {N_mdm(Real,gradientTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( optpp_fd_newton {N_mdm(utype,methodName_OPTPP_FD_NEWTON)}
    [ search_method {0}
      value_based_line_search {N_mdm(lit,searchMethod_value_based_line_search)}
      |
      gradient_based_line_search {N_mdm(lit,searchMethod_gradient_based_line_search)}
      |
      trust_region {N_mdm(lit,searchMethod_trust_region)}
      |
      tr_pds {N_mdm(lit,searchMethod_tr_pds)}
     ]
    [ merit_function {0}
      el_bakry {N_mdm(type,meritFn_NormFmu)}
      |
      argaez_tapia {N_mdm(type,meritFn_ArgaezTapia)}
      |
      van_shanno {N_mdm(type,meritFn_VanShanno)}
     ]
    [ steplength_to_boundary REAL {N_mdm(Real,stepLenToBoundary)} ]
    [ centering_parameter REAL {N_mdm(Real,centeringParam)} ]
    [ max_step REAL {N_mdm(Real,maxStep)} ]
    [ gradient_tolerance REAL {N_mdm(Real,gradientTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( optpp_g_newton {N_mdm(utype,methodName_OPTPP_G_NEWTON)}
    [ search_method {0}
      value_based_line_search {N_mdm(lit,searchMethod_value_based_line_search)}
      |
      gradient_based_line_search {N_mdm(lit,searchMethod_gradient_based_line_search)}
      |
      trust_region {N_mdm(lit,searchMethod_trust_region)}
      |
      tr_pds {N_mdm(lit,searchMethod_tr_pds)}
     ]
    [ merit_function {0}
      el_bakry {N_mdm(type,meritFn_NormFmu)}
      |
      argaez_tapia {N_mdm(type,meritFn_ArgaezTapia)}
      |
      van_shanno {N_mdm(type,meritFn_VanShanno)}
     ]
    [ steplength_to_boundary REAL {N_mdm(Real,stepLenToBoundary)} ]
    [ centering_parameter REAL {N_mdm(Real,centeringParam)} ]
    [ max_step REAL {N_mdm(Real,maxStep)} ]
    [ gradient_tolerance REAL {N_mdm(Real,gradientTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( optpp_newton {N_mdm(utype,methodName_OPTPP_NEWTON)}
    [ search_method {0}
      value_based_line_search {N_mdm(lit,searchMethod_value_based_line_search)}
      |
      gradient_based_line_search {N_mdm(lit,searchMethod_gradient_based_line_search)}
      |
      trust_region {N_mdm(lit,searchMethod_trust_region)}
      |
      tr_pds {N_mdm(lit,searchMethod_tr_pds)}
     ]
    [ merit_function {0}
      el_bakry {N_mdm(type,meritFn_NormFmu)}
      |
      argaez_tapia {N_mdm(type,meritFn_ArgaezTapia)}
      |
      van_shanno {N_mdm(type,meritFn_VanShanno)}
     ]
    [ steplength_to_boundary REAL {N_mdm(Real,stepLenToBoundary)} ]
    [ centering_parameter REAL {N_mdm(Real,centeringParam)} ]
    [ max_step REAL {N_mdm(Real,maxStep)} ]
    [ gradient_tolerance REAL {N_mdm(Real,gradientTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( optpp_pds {N_mdm(utype,methodName_OPTPP_PDS)}
    [ search_scheme_size INTEGER {N_mdm(int,searchSchemeSize)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( demo_tpl {N_mdm(utype,methodName_DEMO_TPL)}
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ variable_tolerance REAL {N_mdm(Real,threshStepLength)} ]
    [ solution_target ALIAS solution_accuracy REAL {N_mdm(Real,solnTarget)} ]
    [ options_file STRING {N_mdm(str,advancedOptionsFilename)} ]
   )
  |
  ( rol {N_mdm(utype,methodName_ROL)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ variable_tolerance REAL {N_mdm(Real,threshStepLength)} ]
    [ gradient_tolerance REAL {N_mdm(Real,gradientTolerance)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ options_file STRING {N_mdm(str,advancedOptionsFilename)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( asynch_pattern_search ALIAS coliny_apps {N_mdm(utype,methodName_ASYNCH_PATTERN_SEARCH)}
    [ initial_delta REAL {N_mdm(Real,initStepLength)} ]
    [ contraction_factor REAL {N_mdm(Real,contractStepLength)} ]
    [ variable_tolerance REAL {N_mdm(Real,threshStepLength)} ]
    [ solution_target ALIAS solution_accuracy REAL {N_mdm(Real,solnTarget)} ]
    [ synchronization {0}
      blocking {N_mdm(type,evalSynchronize_BLOCKING_SYNCHRONIZATION)}
      |
      nonblocking {N_mdm(type,evalSynchronize_NONBLOCKING_SYNCHRONIZATION)}
     ]
    [ merit_function {0}
      merit_max {N_mdm(lit,meritFunction_merit_max)}
      |
      merit_max_smooth {N_mdm(lit,meritFunction_merit_max_smooth)}
      |
      merit1 {N_mdm(lit,meritFunction_merit1)}
      |
      merit1_smooth {N_mdm(lit,meritFunction_merit1_smooth)}
      |
      merit2 {N_mdm(lit,meritFunction_merit2)}
      |
      merit2_smooth {N_mdm(lit,meritFunction_merit2_smooth)}
      |
      merit2_squared {N_mdm(lit,meritFunction_merit2_squared)}
     ]
    [ constraint_penalty REAL {N_mdm(Real,constrPenalty)} ]
    [ smoothing_factor REAL {N_mdm(Real,smoothFactor)} ]
    [ constraint_tolerance REAL {N_mdm(Real,constraintTolerance)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( mesh_adaptive_search {N_mdm(utype,methodName_MESH_ADAPTIVE_SEARCH)}
    [ initial_delta REAL {N_mdm(Real,initMeshSize)} ]
    [ variable_tolerance REAL {N_mdm(Real,minMeshSize)} ]
    [ function_precision REAL {N_mdm(Real,functionPrecision)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ history_file STRING {N_mdm(str,historyFile)} ]
    [ display_format STRING {N_mdm(str,displayFormat)} ]
    [ variable_neighborhood_search REAL {N_mdm(Real,vns)} ]
    [ neighbor_order INTEGER > 0 {N_mdm(int,neighborOrder)} ]
    [ display_all_evaluations {N_mdm(true,showAllEval)} ]
    [ use_surrogate {0}
      inform_search {N_mdm(lit,useSurrogate_inform_search)}
      |
      optimize {N_mdm(lit,useSurrogate_optimize)}
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( nowpac {N_mdm(utype,methodName_MIT_NOWPAC)}
    [ trust_region {0,0,NIDRProblemDescDB::method_tr_final}
      [ initial_size REALLIST {N_mdm(RealDL,trustRegionInitSize)} ]
      [ minimum_size REAL {N_mdm(Real,trustRegionMinSize)} ]
      [ contract_threshold REAL {N_mdm(Real,trustRegionContractTrigger)} ]
      [ expand_threshold REAL {N_mdm(Real,trustRegionExpandTrigger)} ]
      [ contraction_factor REAL {N_mdm(Real,trustRegionContract)} ]
      [ expansion_factor REAL {N_mdm(Real,trustRegionExpand)} ]
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( snowpac {N_mdm(utype,methodName_MIT_SNOWPAC)}
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ trust_region {0,0,NIDRProblemDescDB::method_tr_final}
      [ initial_size REALLIST {N_mdm(RealDL,trustRegionInitSize)} ]
      [ minimum_size REAL {N_mdm(Real,trustRegionMinSize)} ]
      [ contract_threshold REAL {N_mdm(Real,trustRegionContractTrigger)} ]
      [ expand_threshold REAL {N_mdm(Real,trustRegionExpandTrigger)} ]
      [ contraction_factor REAL {N_mdm(Real,trustRegionContract)} ]
      [ expansion_factor REAL {N_mdm(Real,trustRegionExpand)} ]
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( moga {N_mdm(utype,methodName_MOGA)}
    [ fitness_type {0}
      layer_rank {N_mdm(lit,fitnessType_layer_rank)}
      |
      domination_count {N_mdm(lit,fitnessType_domination_count)}
     ]
    [ replacement_type {0}
      elitist {N_mdm(lit,replacementType_elitist)}
      |
      roulette_wheel {N_mdm(lit,replacementType_roulette_wheel)}
      |
      unique_roulette_wheel {N_mdm(lit,replacementType_unique_roulette_wheel)}
      |
      ( below_limit REAL {N_mdm(litp,TYPE_DATA_replacementType_below_limit)}
        [ shrinkage_fraction ALIAS shrinkage_percentage REAL {N_mdm(Real01,shrinkagePercent)} ]
       )
     ]
    [ niching_type {0}
      radial REALLIST {N_mdm(RealLlit,TYPE_DATA_nichingType_radial)}
      |
      distance REALLIST {N_mdm(RealLlit,TYPE_DATA_nichingType_distance)}
      |
      ( max_designs REALLIST {N_mdm(RealLlit,TYPE_DATA_nichingType_max_designs)}
        [ num_designs INTEGER >= 2 {N_mdm(sizet,numDesigns)} ]
       )
     ]
    [ convergence_type {0}
      metric_tracker {N_mdm(lit,convergenceType_metric_tracker)}
      [ percent_change REAL {N_mdm(Realz,convergenceTolerance)} ]
      [ num_generations INTEGER >= 0 {N_mdm(sizet,numGenerations)} ]
     ]
    [ postprocessor_type {0}
      orthogonal_distance REALLIST {N_mdm(RealLlit,TYPE_DATA_postProcessorType_distance_postprocessor)}
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ population_size INTEGER >= 0 {N_mdm(int,populationSize)} ]
    [ log_file STRING {N_mdm(str,logFile)} ]
    [ print_each_pop {N_mdm(true,printPopFlag)} ]
    [ initialization_type {0}
      simple_random {N_mdm(lit,initializationType_random)}
      |
      unique_random {N_mdm(lit,initializationType_unique_random)}
      |
      flat_file STRING {N_mdm(slit2,TYPE_DATA_initializationType_flat_file)}
     ]
    [ crossover_type {0}
      multi_point_binary INTEGER {N_mdm(ilit2p,TYPE_DATA_crossoverType_multi_point_binary)}
      |
      multi_point_parameterized_binary INTEGER {N_mdm(ilit2p,TYPE_DATA_crossoverType_multi_point_parameterized_binary)}
      |
      multi_point_real INTEGER {N_mdm(ilit2p,TYPE_DATA_crossoverType_multi_point_real)}
      |
      ( shuffle_random {N_mdm(litc,TYPE_DATA_crossoverType_shuffle_random)}
        [ num_parents INTEGER > 0 {N_mdm(sizet,numParents)} ]
        [ num_offspring INTEGER > 0 {N_mdm(sizet,numOffspring)} ]
       )
      [ crossover_rate REAL {N_mdm(litz,TYPE_DATA_crossoverType_null_crossover)} ]
     ]
    [ mutation_type {0}
      bit_random {N_mdm(lit,mutationType_bit_random)}
      |
      replace_uniform {N_mdm(lit,mutationType_replace_uniform)}
      |
      ( offset_normal {N_mdm(litc,TYPE_DATA_mutationType_offset_normal)}
        [ mutation_scale REAL {N_mdm(Real01,mutationScale)} ]
       )
      |
      ( offset_cauchy {N_mdm(litc,TYPE_DATA_mutationType_offset_cauchy)}
        [ mutation_scale REAL {N_mdm(Real01,mutationScale)} ]
       )
      |
      ( offset_uniform {N_mdm(litc,TYPE_DATA_mutationType_offset_uniform)}
        [ mutation_scale REAL {N_mdm(Real01,mutationScale)} ]
       )
      [ mutation_rate REAL {N_mdm(litz,TYPE_DATA_mutationType_null_mutation)} ]
     ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( soga {N_mdm(utype,methodName_SOGA)}
    [ fitness_type {0}
      merit_function {N_mdm(lit,fitnessType_merit_function)}
      [ constraint_penalty REAL {N_mdm(Realp,constraintTolerance)} ]
     ]
    [ replacement_type {0}
      elitist {N_mdm(lit,replacementType_elitist)}
      |
      favor_feasible {N_mdm(lit,replacementType_favor_feasible)}
      |
      roulette_wheel {N_mdm(lit,replacementType_roulette_wheel)}
      |
      unique_roulette_wheel {N_mdm(lit,replacementType_unique_roulette_wheel)}
     ]
    [ convergence_type {0}
      ( best_fitness_tracker {N_mdm(lit,convergenceType_best_fitness_tracker)}
        [ percent_change REAL {N_mdm(Realz,convergenceTolerance)} ]
        [ num_generations INTEGER >= 0 {N_mdm(sizet,numGenerations)} ]
       )
      |
      ( average_fitness_tracker {N_mdm(lit,convergenceType_average_fitness_tracker)}
        [ percent_change REAL {N_mdm(Realz,convergenceTolerance)} ]
        [ num_generations INTEGER >= 0 {N_mdm(sizet,numGenerations)} ]
       )
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ population_size INTEGER >= 0 {N_mdm(int,populationSize)} ]
    [ log_file STRING {N_mdm(str,logFile)} ]
    [ print_each_pop {N_mdm(true,printPopFlag)} ]
    [ initialization_type {0}
      simple_random {N_mdm(lit,initializationType_random)}
      |
      unique_random {N_mdm(lit,initializationType_unique_random)}
      |
      flat_file STRING {N_mdm(slit2,TYPE_DATA_initializationType_flat_file)}
     ]
    [ crossover_type {0}
      multi_point_binary INTEGER {N_mdm(ilit2p,TYPE_DATA_crossoverType_multi_point_binary)}
      |
      multi_point_parameterized_binary INTEGER {N_mdm(ilit2p,TYPE_DATA_crossoverType_multi_point_parameterized_binary)}
      |
      multi_point_real INTEGER {N_mdm(ilit2p,TYPE_DATA_crossoverType_multi_point_real)}
      |
      ( shuffle_random {N_mdm(litc,TYPE_DATA_crossoverType_shuffle_random)}
        [ num_parents INTEGER > 0 {N_mdm(sizet,numParents)} ]
        [ num_offspring INTEGER > 0 {N_mdm(sizet,numOffspring)} ]
       )
      [ crossover_rate REAL {N_mdm(litz,TYPE_DATA_crossoverType_null_crossover)} ]
     ]
    [ mutation_type {0}
      bit_random {N_mdm(lit,mutationType_bit_random)}
      |
      replace_uniform {N_mdm(lit,mutationType_replace_uniform)}
      |
      ( offset_normal {N_mdm(litc,TYPE_DATA_mutationType_offset_normal)}
        [ mutation_scale REAL {N_mdm(Real01,mutationScale)} ]
       )
      |
      ( offset_cauchy {N_mdm(litc,TYPE_DATA_mutationType_offset_cauchy)}
        [ mutation_scale REAL {N_mdm(Real01,mutationScale)} ]
       )
      |
      ( offset_uniform {N_mdm(litc,TYPE_DATA_mutationType_offset_uniform)}
        [ mutation_scale REAL {N_mdm(Real01,mutationScale)} ]
       )
      [ mutation_rate REAL {N_mdm(litz,TYPE_DATA_mutationType_null_mutation)} ]
     ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( coliny_pattern_search {N_mdm(utype,methodName_COLINY_PATTERN_SEARCH)}
    [ constant_penalty {N_mdm(true,constantPenalty)} ]
    [ no_expansion {N_mdm(false,expansionFlag)} ]
    [ expand_after_success INTEGER {N_mdm(int,expandAfterSuccess)} ]
    [ pattern_basis {0}
      coordinate {N_mdm(lit,patternBasis_coordinate)}
      |
      simplex {N_mdm(lit,patternBasis_simplex)}
     ]
    [ stochastic {N_mdm(true,randomizeOrderFlag)} ]
    [ total_pattern_size INTEGER {N_mdm(int,totalPatternSize)} ]
    [ exploratory_moves {0}
      multi_step {N_mdm(lit,exploratoryMoves_multi_step)}
      |
      adaptive_pattern {N_mdm(lit,exploratoryMoves_adaptive)}
      |
      basic_pattern {N_mdm(lit,exploratoryMoves_simple)}
     ]
    [ synchronization {0}
      blocking {N_mdm(type,evalSynchronize_BLOCKING_SYNCHRONIZATION)}
      |
      nonblocking {N_mdm(type,evalSynchronize_NONBLOCKING_SYNCHRONIZATION)}
     ]
    [ contraction_factor REAL {N_mdm(Real,contractFactor)} ]
    [ constraint_penalty REAL {N_mdm(Real,constraintPenalty)} ]
    [ initial_delta REAL {N_mdm(Real,initDelta)} ]
    [ variable_tolerance REAL {N_mdm(Real,threshDelta)} ]
    [ solution_target ALIAS solution_accuracy REAL {N_mdm(Real,solnTarget)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ show_misc_options {N_mdm(true,showMiscOptions)} ]
    [ misc_options STRINGLIST {N_mdm(strL,miscOptions)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( coliny_solis_wets {N_mdm(utype,methodName_COLINY_SOLIS_WETS)}
    [ contract_after_failure INTEGER {N_mdm(int,contractAfterFail)} ]
    [ no_expansion {N_mdm(false,expansionFlag)} ]
    [ expand_after_success INTEGER {N_mdm(int,expandAfterSuccess)} ]
    [ constant_penalty {N_mdm(true,constantPenalty)} ]
    [ contraction_factor REAL {N_mdm(Real,contractFactor)} ]
    [ constraint_penalty REAL {N_mdm(Real,constraintPenalty)} ]
    [ initial_delta REAL {N_mdm(Real,initDelta)} ]
    [ variable_tolerance REAL {N_mdm(Real,threshDelta)} ]
    [ solution_target ALIAS solution_accuracy REAL {N_mdm(Real,solnTarget)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ show_misc_options {N_mdm(true,showMiscOptions)} ]
    [ misc_options STRINGLIST {N_mdm(strL,miscOptions)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( coliny_cobyla {N_mdm(utype,methodName_COLINY_COBYLA)}
    [ initial_delta REAL {N_mdm(Real,initDelta)} ]
    [ variable_tolerance REAL {N_mdm(Real,threshDelta)} ]
    [ solution_target ALIAS solution_accuracy REAL {N_mdm(Real,solnTarget)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ show_misc_options {N_mdm(true,showMiscOptions)} ]
    [ misc_options STRINGLIST {N_mdm(strL,miscOptions)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( coliny_direct {N_mdm(utype,methodName_COLINY_DIRECT)}
    [ division {0}
      major_dimension {N_mdm(lit,boxDivision_major_dimension)}
      |
      all_dimensions {N_mdm(lit,boxDivision_all_dimensions)}
     ]
    [ global_balance_parameter REAL {N_mdm(Real,globalBalanceParam)} ]
    [ local_balance_parameter REAL {N_mdm(Real,localBalanceParam)} ]
    [ max_boxsize_limit REAL {N_mdm(Real,maxBoxSize)} ]
    [ min_boxsize_limit REAL {N_mdm(Real,minBoxSize)} ]
    [ constraint_penalty REAL {N_mdm(Real,constraintPenalty)} ]
    [ solution_target ALIAS solution_accuracy REAL {N_mdm(Real,solnTarget)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ show_misc_options {N_mdm(true,showMiscOptions)} ]
    [ misc_options STRINGLIST {N_mdm(strL,miscOptions)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( coliny_ea {N_mdm(utype,methodName_COLINY_EA)}
    [ population_size INTEGER > 0 {N_mdm(int,populationSize)} ]
    [ initialization_type {0}
      simple_random {N_mdm(lit,initializationType_random)}
      |
      unique_random {N_mdm(lit,initializationType_unique_random)}
      |
      flat_file STRING {N_mdm(slit2,TYPE_DATA_initializationType_flat_file)}
     ]
    [ fitness_type {0}
      linear_rank {N_mdm(lit,fitnessType_linear_rank)}
      |
      merit_function {N_mdm(lit,fitnessType_proportional)}
     ]
    [ replacement_type {0}
      random INTEGER {N_mdm(ilit2,TYPE_DATA_replacementType_random)}
      |
      chc INTEGER {N_mdm(ilit2,TYPE_DATA_replacementType_chc)}
      |
      elitist INTEGER {N_mdm(ilit2,TYPE_DATA_replacementType_elitist)}
      [ new_solutions_generated INTEGER {N_mdm(int,newSolnsGenerated)} ]
     ]
    [ crossover_rate REAL {N_mdm(Real,crossoverRate)} ]
    [ crossover_type {0}
      two_point {N_mdm(lit,crossoverType_two_point)}
      |
      blend {N_mdm(lit,crossoverType_blend)}
      |
      uniform {N_mdm(lit,crossoverType_uniform)}
     ]
    [ mutation_rate REAL {N_mdm(Real,mutationRate)} ]
    [ mutation_type {0}
      replace_uniform {N_mdm(lit,mutationType_replace_uniform)}
      |
      ( offset_normal {N_mdm(lit,mutationType_offset_normal)}
        [ mutation_scale REAL {N_mdm(Real,mutationScale)} ]
        [ mutation_range INTEGER {N_mdm(int,mutationRange)} ]
       )
      |
      ( offset_cauchy {N_mdm(lit,mutationType_offset_cauchy)}
        [ mutation_scale REAL {N_mdm(Real,mutationScale)} ]
        [ mutation_range INTEGER {N_mdm(int,mutationRange)} ]
       )
      |
      ( offset_uniform {N_mdm(lit,mutationType_offset_uniform)}
        [ mutation_scale REAL {N_mdm(Real,mutationScale)} ]
        [ mutation_range INTEGER {N_mdm(int,mutationRange)} ]
       )
      [ non_adaptive {N_mdm(false,mutationAdaptive)} ]
     ]
    [ constraint_penalty REAL {N_mdm(Real,constraintPenalty)} ]
    [ solution_target ALIAS solution_accuracy REAL {N_mdm(Real,solnTarget)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ show_misc_options {N_mdm(true,showMiscOptions)} ]
    [ misc_options STRINGLIST {N_mdm(strL,miscOptions)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( coliny_beta {N_mdm(utype,methodName_COLINY_BETA)}
    beta_solver_name STRING {N_mdm(str,betaSolverName)}
    [ solution_target ALIAS solution_accuracy REAL {N_mdm(Real,solnTarget)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ show_misc_options {N_mdm(true,showMiscOptions)} ]
    [ misc_options STRINGLIST {N_mdm(strL,miscOptions)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( nl2sol {N_mdm(utype,methodName_NL2SOL)}
    [ function_precision REAL {N_mdm(Real,functionPrecision)} ]
    [ absolute_conv_tol REAL {N_mdm(Real,absConvTol)} ]
    [ x_conv_tol REAL {N_mdm(Real,xConvTol)} ]
    [ singular_conv_tol REAL {N_mdm(Real,singConvTol)} ]
    [ singular_radius REAL {N_mdm(Real,singRadius)} ]
    [ false_conv_tol REAL {N_mdm(Real,falseConvTol)} ]
    [ initial_trust_radius REAL {N_mdm(Real,initTRRadius)} ]
    [ covariance INTEGER {N_mdm(int,covarianceType)} ]
    [ regression_diagnostics {N_mdm(true,regressDiag)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ speculative {N_mdm(true,speculativeFlag)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( nonlinear_cg {N_mdm(utype,methodName_NONLINEAR_CG)}
    [ misc_options STRINGLIST {N_mdm(strL,miscOptions)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( ncsu_direct {N_mdm(utype,methodName_NCSU_DIRECT)}
    [ solution_target ALIAS solution_accuracy REAL {N_mdm(Real,solnTarget)} ]
    [ min_boxsize_limit REAL {N_mdm(Real,minBoxSize)} ]
    [ volume_boxsize_limit REAL {N_mdm(Real,volBoxSize)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( genie_opt_darts {N_mdm(utype,methodName_GENIE_OPT_DARTS)}
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( genie_direct {N_mdm(utype,methodName_GENIE_DIRECT)}
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( efficient_global {N_mdm(utype,methodName_EFFICIENT_GLOBAL)}
    [ initial_samples INTEGER {N_mdm(int,numSamples)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ batch_size INTEGER >= 1 {N_mdm(int,batchSize)}
      [ exploration INTEGER >= 0 {N_mdm(int,batchSizeExplore)} ]
      [ synchronization {0}
        blocking {N_mdm(type,evalSynchronize_BLOCKING_SYNCHRONIZATION)}
        |
        nonblocking {N_mdm(type,evalSynchronize_NONBLOCKING_SYNCHRONIZATION)}
       ]
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ x_conv_tol REAL {N_mdm(Real,xConvTol)} ]
    [ gaussian_process ALIAS kriging {0}
      ( surfpack {N_mdm(type,emulatorType_KRIGING_EMULATOR)}
        [ export_model {N_mdm(true,exportSurrogate)}
          [ filename_prefix STRING {N_mdm(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mdm(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mdm(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
           )
         ]
       )
      |
      dakota {N_mdm(type,emulatorType_GP_EMULATOR)}
      |
      ( experimental {N_mdm(type,emulatorType_EXPGP_EMULATOR)}
        [ export_model {N_mdm(true,exportSurrogate)}
          [ filename_prefix STRING {N_mdm(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mdm(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mdm(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
           )
         ]
        [ options_file STRING {N_mdm(str,advancedOptionsFilename)} ]
       )
     ]
    [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
    [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importBuildActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( surrogate_based_uq {N_mdm(utype,methodName_SURROGATE_BASED_UQ)}
    [ samples_on_emulator ALIAS samples INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ probability_refinement ALIAS sample_refinement {0}
      import {N_mdm(utype,integrationRefine_IS)}
      |
      adapt_import {N_mdm(utype,integrationRefine_AIS)}
      |
      mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
      [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
     ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ interaction_order INTEGER > 0 {N_mdm(ushint,vbdOrder)} ]
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
     ]
    [ 
      diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
      |
      full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
     ]
    [ import_approx_points_file STRING {N_mdm(str,importApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importApproxActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( function_train {N_mdm(utype,methodName_C3_FUNCTION_TRAIN)}
    [ p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
      ( uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
        increment_start_rank {N_mdm(type,c3AdvanceType_START_RANK_ADVANCEMENT)}
        |
        increment_start_order {N_mdm(type,c3AdvanceType_START_ORDER_ADVANCEMENT)}
        |
        increment_max_rank {N_mdm(type,c3AdvanceType_MAX_RANK_ADVANCEMENT)}
        |
        increment_max_order {N_mdm(type,c3AdvanceType_MAX_ORDER_ADVANCEMENT)}
        |
        increment_max_rank_order {N_mdm(type,c3AdvanceType_MAX_RANK_ORDER_ADVANCEMENT)}
       )
     ]
    [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ metric_scale {0}
      relative {N_mdm(true,relativeConvMetric)}
      |
      absolute {N_mdm(false,relativeConvMetric)}
     ]
    [ regression_type {0}
      ls {N_mdm(type,regressionType_FT_LS)}
      |
      ( rls2 {N_mdm(type,regressionType_FT_RLS2)}
        l2_penalty REAL {N_mdm(Real,regressionL2Penalty)}
       )
     ]
    [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
    [ max_cross_iterations INTEGER >= 0 {N_mdm(int,maxCrossIterations)} ]
    [ solver_tolerance REAL {N_mdm(Real,solverTol)} ]
    [ response_scaling {N_mdm(true,respScalingFlag)} ]
    [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
    collocation_points INTEGER {N_mdm(sizet,collocationPoints)}
    |
    collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
    [ rounding_tolerance REAL {N_mdm(Real,solverRoundingTol)} ]
    [ arithmetic_tolerance REAL {N_mdm(Real,statsRoundingTol)} ]
    [ start_order ALIAS order INTEGER >= 0 {N_mdm(ushint,startOrder)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
     ]
    [ adapt_order {N_mdm(true,adaptOrder)} ]
    [ kick_order INTEGER > 0 {N_mdm(ushint,kickOrder)} ]
    [ max_order INTEGER >= 0 {N_mdm(ushint,maxOrder)} ]
    [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
    [ start_rank ALIAS rank INTEGER >= 0 {N_mdm(sizet,startRank)} ]
    [ adapt_rank {N_mdm(true,adaptRank)} ]
    [ kick_rank INTEGER > 0 {N_mdm(sizet,kickRank)} ]
    [ max_rank INTEGER >= 0 {N_mdm(sizet,maxRank)} ]
    [ max_cv_rank_candidates INTEGER >= 0 {N_mdm(sizet,maxCVRankCandidates)} ]
    [ samples_on_emulator ALIAS samples INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ probability_refinement ALIAS sample_refinement {0}
      import {N_mdm(utype,integrationRefine_IS)}
      |
      adapt_import {N_mdm(utype,integrationRefine_AIS)}
      |
      mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
      [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
     ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ interaction_order INTEGER > 0 {N_mdm(ushint,vbdOrder)} ]
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
     ]
    [ 
      diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
      |
      full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
     ]
    [ import_approx_points_file STRING {N_mdm(str,importApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importApproxActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( multifidelity_function_train {N_mdm(utype,methodName_MULTIFIDELITY_FUNCTION_TRAIN)}
    [ p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
      ( uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
        increment_start_rank {N_mdm(type,c3AdvanceType_START_RANK_ADVANCEMENT)}
        |
        increment_start_order {N_mdm(type,c3AdvanceType_START_ORDER_ADVANCEMENT)}
        |
        increment_max_rank {N_mdm(type,c3AdvanceType_MAX_RANK_ADVANCEMENT)}
        |
        increment_max_order {N_mdm(type,c3AdvanceType_MAX_ORDER_ADVANCEMENT)}
        |
        increment_max_rank_order {N_mdm(type,c3AdvanceType_MAX_RANK_ORDER_ADVANCEMENT)}
       )
     ]
    [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ metric_scale {0}
      relative {N_mdm(true,relativeConvMetric)}
      |
      absolute {N_mdm(false,relativeConvMetric)}
     ]
    [ statistics_mode {0}
      active {N_mdm(type,statsMetricMode_ACTIVE_EXPANSION_STATS)}
      |
      combined {N_mdm(type,statsMetricMode_COMBINED_EXPANSION_STATS)}
     ]
    [ allocation_control {0}
      greedy {N_mdm(type,multilevAllocControl_GREEDY_REFINEMENT)}
     ]
    [ discrepancy_emulation {0}
      distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
      |
      recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
     ]
    [ rounding_tolerance REAL {N_mdm(Real,solverRoundingTol)} ]
    [ arithmetic_tolerance REAL {N_mdm(Real,statsRoundingTol)} ]
    [ regression_type {0}
      ls {N_mdm(type,regressionType_FT_LS)}
      |
      ( rls2 {N_mdm(type,regressionType_FT_RLS2)}
        l2_penalty REAL {N_mdm(Real,regressionL2Penalty)}
       )
     ]
    [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
    [ max_cross_iterations INTEGER >= 0 {N_mdm(int,maxCrossIterations)} ]
    [ solver_tolerance REAL {N_mdm(Real,solverTol)} ]
    [ response_scaling {N_mdm(true,respScalingFlag)} ]
    [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
    [ collocation_points_sequence ALIAS pilot_samples INTEGERLIST {N_mdm(szarray,collocationPointsSeq)} ]
    [ collocation_ratio REAL {N_mdm(Realp,collocationRatio)} ]
    [ start_order_sequence ALIAS order_sequence INTEGERLIST {N_mdm(usharray,startOrderSeq)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
     ]
    [ adapt_order {N_mdm(true,adaptOrder)} ]
    [ kick_order INTEGER > 0 {N_mdm(ushint,kickOrder)} ]
    [ max_order INTEGER >= 0 {N_mdm(ushint,maxOrder)} ]
    [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
    [ start_rank_sequence ALIAS rank_sequence INTEGERLIST {N_mdm(szarray,startRankSeq)} ]
    [ adapt_rank {N_mdm(true,adaptRank)} ]
    [ kick_rank INTEGER > 0 {N_mdm(sizet,kickRank)} ]
    [ max_rank INTEGER >= 0 {N_mdm(sizet,maxRank)} ]
    [ max_cv_rank_candidates INTEGER >= 0 {N_mdm(sizet,maxCVRankCandidates)} ]
    [ samples_on_emulator ALIAS samples INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ probability_refinement ALIAS sample_refinement {0}
      import {N_mdm(utype,integrationRefine_IS)}
      |
      adapt_import {N_mdm(utype,integrationRefine_AIS)}
      |
      mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
      [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
     ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ interaction_order INTEGER > 0 {N_mdm(ushint,vbdOrder)} ]
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
     ]
    [ 
      diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
      |
      full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
     ]
    [ import_approx_points_file STRING {N_mdm(str,importApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importApproxActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ seed_sequence INTEGERLIST {N_mdm(szarray,randomSeedSeq)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( multilevel_function_train {N_mdm(utype,methodName_MULTILEVEL_FUNCTION_TRAIN)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ allocation_control {0}
      ( estimator_variance {N_mdm(type,multilevAllocControl_ESTIMATOR_VARIANCE)}
        [ estimator_rate REAL {N_mdm(Real,multilevEstimatorRate)} ]
       )
      |
      rank_sampling {N_mdm(type,multilevAllocControl_RANK_SAMPLING)}
     ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ metric_scale {0}
      relative {N_mdm(true,relativeConvMetric)}
      |
      absolute {N_mdm(false,relativeConvMetric)}
     ]
    [ discrepancy_emulation {0}
      distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
      |
      recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
     ]
    [ rounding_tolerance REAL {N_mdm(Real,solverRoundingTol)} ]
    [ arithmetic_tolerance REAL {N_mdm(Real,statsRoundingTol)} ]
    [ regression_type {0}
      ls {N_mdm(type,regressionType_FT_LS)}
      |
      ( rls2 {N_mdm(type,regressionType_FT_RLS2)}
        l2_penalty REAL {N_mdm(Real,regressionL2Penalty)}
       )
     ]
    [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
    [ max_cross_iterations INTEGER >= 0 {N_mdm(int,maxCrossIterations)} ]
    [ solver_tolerance REAL {N_mdm(Real,solverTol)} ]
    [ response_scaling {N_mdm(true,respScalingFlag)} ]
    [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
    [ collocation_points_sequence ALIAS pilot_samples INTEGERLIST {N_mdm(szarray,collocationPointsSeq)} ]
    [ collocation_ratio REAL {N_mdm(Realp,collocationRatio)} ]
    [ start_order_sequence ALIAS order_sequence INTEGERLIST {N_mdm(usharray,startOrderSeq)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
     ]
    [ adapt_order {N_mdm(true,adaptOrder)} ]
    [ kick_order INTEGER > 0 {N_mdm(ushint,kickOrder)} ]
    [ max_order INTEGER >= 0 {N_mdm(ushint,maxOrder)} ]
    [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
    [ start_rank_sequence ALIAS rank_sequence INTEGERLIST {N_mdm(szarray,startRankSeq)} ]
    [ adapt_rank {N_mdm(true,adaptRank)} ]
    [ kick_rank INTEGER > 0 {N_mdm(sizet,kickRank)} ]
    [ max_rank INTEGER >= 0 {N_mdm(sizet,maxRank)} ]
    [ max_cv_rank_candidates INTEGER >= 0 {N_mdm(sizet,maxCVRankCandidates)} ]
    [ samples_on_emulator ALIAS samples INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ probability_refinement ALIAS sample_refinement {0}
      import {N_mdm(utype,integrationRefine_IS)}
      |
      adapt_import {N_mdm(utype,integrationRefine_AIS)}
      |
      mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
      [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
     ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ interaction_order INTEGER > 0 {N_mdm(ushint,vbdOrder)} ]
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
     ]
    [ 
      diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
      |
      full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
     ]
    [ import_approx_points_file STRING {N_mdm(str,importApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importApproxActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ seed_sequence INTEGERLIST {N_mdm(szarray,randomSeedSeq)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( polynomial_chaos ALIAS nond_polynomial_chaos {N_mdm(utype,methodName_POLYNOMIAL_CHAOS)}
    [ p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
      uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
      |
      ( dimension_adaptive {0}
        sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
        |
        decay {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_DECAY)}
        |
        generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
       )
     ]
    [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ metric_scale {0}
      relative {N_mdm(true,relativeConvMetric)}
      |
      absolute {N_mdm(false,relativeConvMetric)}
     ]
    ( quadrature_order INTEGER {N_mdm(ushint,quadratureOrder)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ 
        nested {N_mdm(type,nestingOverride_NESTED)}
        |
        non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
       ]
     )
    |
    ( sparse_grid_level INTEGER {N_mdm(ushint,sparseGridLevel)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ 
        restricted {N_mdm(type,growthOverride_RESTRICTED)}
        |
        unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
       ]
      [ 
        nested {N_mdm(type,nestingOverride_NESTED)}
        |
        non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
       ]
     )
    |
    cubature_integrand INTEGER {N_mdm(ushint,cubIntOrder)}
    |
    ( expansion_order INTEGER {N_mdm(ushint,expansionOrder)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ basis_type {0}
        tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
        |
        total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
        |
        ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
          [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
          [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
         )
       ]
      ( collocation_points INTEGER {N_mdm(sizet,collocationPoints)}
        [ 
          ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
            [ 
              svd {N_mdm(type,lsRegressionType_SVD_LS)}
              |
              equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
             ]
           )
          |
          ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
          |
          ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
            [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
           )
         ]
        [ cross_validation {N_mdm(true,crossValidation)}
          [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
          [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
         ]
        [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
        [ response_scaling {N_mdm(true,respScalingFlag)} ]
        [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
        [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
        [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
        [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
       )
      |
      ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
        [ 
          ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
            [ 
              svd {N_mdm(type,lsRegressionType_SVD_LS)}
              |
              equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
             ]
           )
          |
          ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
          |
          ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
            [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
           )
         ]
        [ cross_validation {N_mdm(true,crossValidation)}
          [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
          [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
         ]
        [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
        [ response_scaling {N_mdm(true,respScalingFlag)} ]
        [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
        [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
        [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
        [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
       )
      |
      ( expansion_samples INTEGER {N_mdm(sizet,expansionSamples)}
        [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
       )
      [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
         ]
        [ active_only {N_mdm(true,importBuildActive)} ]
       ]
     )
    |
    ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
      collocation_points INTEGER {N_mdm(sizet,collocationPoints)}
      [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
      [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
      [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
         ]
        [ active_only {N_mdm(true,importBuildActive)} ]
       ]
     )
    |
    import_expansion_file STRING {N_mdm(str,importExpansionFile)}
    [ 
      askey {N_mdm(type,expansionType_ASKEY_U)}
      |
      wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
     ]
    [ normalized {N_mdm(true,normalizedCoeffs)} ]
    [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
    [ samples_on_emulator ALIAS samples INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ probability_refinement ALIAS sample_refinement {0}
      import {N_mdm(utype,integrationRefine_IS)}
      |
      adapt_import {N_mdm(utype,integrationRefine_AIS)}
      |
      mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
      [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
     ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ interaction_order INTEGER > 0 {N_mdm(ushint,vbdOrder)} ]
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
     ]
    [ 
      diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
      |
      full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
     ]
    [ import_approx_points_file STRING {N_mdm(str,importApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importApproxActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( multifidelity_polynomial_chaos {N_mdm(utype,methodName_MULTIFIDELITY_POLYNOMIAL_CHAOS)}
    [ p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
      uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
      |
      ( dimension_adaptive {0}
        sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
        |
        decay {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_DECAY)}
        |
        generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
       )
     ]
    [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ metric_scale {0}
      relative {N_mdm(true,relativeConvMetric)}
      |
      absolute {N_mdm(false,relativeConvMetric)}
     ]
    [ statistics_mode {0}
      active {N_mdm(type,statsMetricMode_ACTIVE_EXPANSION_STATS)}
      |
      combined {N_mdm(type,statsMetricMode_COMBINED_EXPANSION_STATS)}
     ]
    [ allocation_control {0}
      greedy {N_mdm(type,multilevAllocControl_GREEDY_REFINEMENT)}
     ]
    [ discrepancy_emulation {0}
      distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
      |
      recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
     ]
    ( quadrature_order_sequence INTEGERLIST {N_mdm(usharray,quadratureOrderSeq)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ 
        nested {N_mdm(type,nestingOverride_NESTED)}
        |
        non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
       ]
     )
    |
    ( sparse_grid_level_sequence INTEGERLIST {N_mdm(usharray,sparseGridLevelSeq)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ 
        restricted {N_mdm(type,growthOverride_RESTRICTED)}
        |
        unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
       ]
      [ 
        nested {N_mdm(type,nestingOverride_NESTED)}
        |
        non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
       ]
     )
    |
    ( expansion_order_sequence INTEGERLIST {N_mdm(usharray,expansionOrderSeq)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ basis_type {0}
        tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
        |
        total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
        |
        ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
          [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
          [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
         )
       ]
      ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
        [ collocation_points_sequence ALIAS pilot_samples INTEGERLIST {N_mdm(szarray,collocationPointsSeq)} ]
        [ 
          ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
            [ 
              svd {N_mdm(type,lsRegressionType_SVD_LS)}
              |
              equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
             ]
           )
          |
          ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
          |
          ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
            [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
           )
         ]
        [ cross_validation {N_mdm(true,crossValidation)}
          [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
          [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
         ]
        [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
        [ response_scaling {N_mdm(true,respScalingFlag)} ]
        [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
        [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
        [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
        [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
       )
      |
      ( expansion_samples_sequence INTEGERLIST {N_mdm(szarray,expansionSamplesSeq)}
        [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
       )
      [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
         ]
        [ active_only {N_mdm(true,importBuildActive)} ]
       ]
     )
    |
    ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
      collocation_points_sequence INTEGERLIST {N_mdm(szarray,collocationPointsSeq)}
      [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
      [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
      [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
         ]
        [ active_only {N_mdm(true,importBuildActive)} ]
       ]
     )
    [ 
      askey {N_mdm(type,expansionType_ASKEY_U)}
      |
      wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
     ]
    [ normalized {N_mdm(true,normalizedCoeffs)} ]
    [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
    [ samples_on_emulator ALIAS samples INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ probability_refinement ALIAS sample_refinement {0}
      import {N_mdm(utype,integrationRefine_IS)}
      |
      adapt_import {N_mdm(utype,integrationRefine_AIS)}
      |
      mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
      [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
     ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ interaction_order INTEGER > 0 {N_mdm(ushint,vbdOrder)} ]
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
     ]
    [ 
      diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
      |
      full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
     ]
    [ import_approx_points_file STRING {N_mdm(str,importApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importApproxActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ seed_sequence INTEGERLIST {N_mdm(szarray,randomSeedSeq)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( multilevel_polynomial_chaos {N_mdm(utype,methodName_MULTILEVEL_POLYNOMIAL_CHAOS)}
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ allocation_control {0}
      ( estimator_variance {N_mdm(type,multilevAllocControl_ESTIMATOR_VARIANCE)}
        [ estimator_rate REAL {N_mdm(Real,multilevEstimatorRate)} ]
       )
      |
      rip_sampling {N_mdm(type,multilevAllocControl_RIP_SAMPLING)}
     ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ metric_scale {0}
      relative {N_mdm(true,relativeConvMetric)}
      |
      absolute {N_mdm(false,relativeConvMetric)}
     ]
    [ discrepancy_emulation {0}
      distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
      |
      recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
     ]
    ( expansion_order_sequence INTEGERLIST {N_mdm(usharray,expansionOrderSeq)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ basis_type {0}
        tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
        |
        total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
        |
        ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
          [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
          [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
         )
       ]
      ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
        [ collocation_points_sequence ALIAS pilot_samples INTEGERLIST {N_mdm(szarray,collocationPointsSeq)} ]
        [ 
          ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
            [ 
              svd {N_mdm(type,lsRegressionType_SVD_LS)}
              |
              equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
             ]
           )
          |
          ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
          |
          ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
           )
          |
          ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
            [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
            [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
           )
         ]
        [ cross_validation {N_mdm(true,crossValidation)}
          [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
          [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
         ]
        [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
        [ response_scaling {N_mdm(true,respScalingFlag)} ]
        [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
        [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
        [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
        [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
       )
      |
      ( expansion_samples_sequence INTEGERLIST {N_mdm(szarray,expansionSamplesSeq)}
        [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
       )
      [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
         ]
        [ active_only {N_mdm(true,importBuildActive)} ]
       ]
     )
    |
    ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
      collocation_points_sequence INTEGERLIST {N_mdm(szarray,collocationPointsSeq)}
      [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
      [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
      [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
         ]
        [ active_only {N_mdm(true,importBuildActive)} ]
       ]
     )
    [ 
      askey {N_mdm(type,expansionType_ASKEY_U)}
      |
      wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
     ]
    [ normalized {N_mdm(true,normalizedCoeffs)} ]
    [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
    [ samples_on_emulator ALIAS samples INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ probability_refinement ALIAS sample_refinement {0}
      import {N_mdm(utype,integrationRefine_IS)}
      |
      adapt_import {N_mdm(utype,integrationRefine_AIS)}
      |
      mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
      [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
     ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ interaction_order INTEGER > 0 {N_mdm(ushint,vbdOrder)} ]
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
     ]
    [ 
      diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
      |
      full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
     ]
    [ import_approx_points_file STRING {N_mdm(str,importApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importApproxActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ seed_sequence INTEGERLIST {N_mdm(szarray,randomSeedSeq)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( stoch_collocation ALIAS nond_stoch_collocation {N_mdm(utype,methodName_STOCH_COLLOCATION)}
    [ 
      ( p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
        uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
        |
        ( dimension_adaptive {0}
          sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
          |
          generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
         )
       )
      |
      ( h_refinement {N_mdm(type,refinementType_H_REFINEMENT)}
        uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
        |
        ( dimension_adaptive {0}
          sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
          |
          generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
         )
        |
        local_adaptive {N_mdm(type,refinementControl_LOCAL_ADAPTIVE_CONTROL)}
       )
     ]
    [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ metric_scale {0}
      relative {N_mdm(true,relativeConvMetric)}
      |
      absolute {N_mdm(false,relativeConvMetric)}
     ]
    ( quadrature_order INTEGER {N_mdm(ushint,quadratureOrder)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ 
        nested {N_mdm(type,nestingOverride_NESTED)}
        |
        non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
       ]
     )
    |
    ( sparse_grid_level INTEGER {N_mdm(ushint,sparseGridLevel)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ 
        nodal {N_mdm(type,expansionBasisType_NODAL_INTERPOLANT)}
        |
        hierarchical {N_mdm(type,expansionBasisType_HIERARCHICAL_INTERPOLANT)}
       ]
      [ 
        restricted {N_mdm(type,growthOverride_RESTRICTED)}
        |
        unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
       ]
      [ 
        nested {N_mdm(type,nestingOverride_NESTED)}
        |
        non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
       ]
     )
    [ 
      piecewise {NIDRProblemDescDB::method_piecewise}
      |
      askey {N_mdm(type,expansionType_ASKEY_U)}
      |
      wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
     ]
    [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
    [ samples_on_emulator ALIAS samples INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ probability_refinement ALIAS sample_refinement {0}
      import {N_mdm(utype,integrationRefine_IS)}
      |
      adapt_import {N_mdm(utype,integrationRefine_AIS)}
      |
      mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
      [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
     ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ interaction_order INTEGER > 0 {N_mdm(ushint,vbdOrder)} ]
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
     ]
    [ 
      diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
      |
      full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
     ]
    [ import_approx_points_file STRING {N_mdm(str,importApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importApproxActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( multifidelity_stoch_collocation {N_mdm(utype,methodName_MULTIFIDELITY_STOCH_COLLOCATION)}
    [ 
      ( p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
        uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
        |
        ( dimension_adaptive {0}
          sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
          |
          generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
         )
       )
      |
      ( h_refinement {N_mdm(type,refinementType_H_REFINEMENT)}
        uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
        |
        ( dimension_adaptive {0}
          sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
          |
          generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
         )
        |
        local_adaptive {N_mdm(type,refinementControl_LOCAL_ADAPTIVE_CONTROL)}
       )
     ]
    [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ metric_scale {0}
      relative {N_mdm(true,relativeConvMetric)}
      |
      absolute {N_mdm(false,relativeConvMetric)}
     ]
    [ statistics_mode {0}
      active {N_mdm(type,statsMetricMode_ACTIVE_EXPANSION_STATS)}
      |
      combined {N_mdm(type,statsMetricMode_COMBINED_EXPANSION_STATS)}
     ]
    [ allocation_control {0}
      greedy {N_mdm(type,multilevAllocControl_GREEDY_REFINEMENT)}
     ]
    [ discrepancy_emulation {0}
      distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
      |
      recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
     ]
    ( quadrature_order_sequence INTEGERLIST {N_mdm(usharray,quadratureOrderSeq)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ 
        nested {N_mdm(type,nestingOverride_NESTED)}
        |
        non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
       ]
     )
    |
    ( sparse_grid_level_sequence INTEGERLIST {N_mdm(usharray,sparseGridLevelSeq)}
      [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
      [ 
        nodal {N_mdm(type,expansionBasisType_NODAL_INTERPOLANT)}
        |
        hierarchical {N_mdm(type,expansionBasisType_HIERARCHICAL_INTERPOLANT)}
       ]
      [ 
        restricted {N_mdm(type,growthOverride_RESTRICTED)}
        |
        unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
       ]
      [ 
        nested {N_mdm(type,nestingOverride_NESTED)}
        |
        non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
       ]
     )
    [ 
      piecewise {NIDRProblemDescDB::method_piecewise}
      |
      askey {N_mdm(type,expansionType_ASKEY_U)}
      |
      wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
     ]
    [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
    [ samples_on_emulator ALIAS samples INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ probability_refinement ALIAS sample_refinement {0}
      import {N_mdm(utype,integrationRefine_IS)}
      |
      adapt_import {N_mdm(utype,integrationRefine_AIS)}
      |
      mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
      [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
     ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ interaction_order INTEGER > 0 {N_mdm(ushint,vbdOrder)} ]
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
     ]
    [ 
      diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
      |
      full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
     ]
    [ import_approx_points_file STRING {N_mdm(str,importApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importApproxFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importApproxActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ seed_sequence INTEGERLIST {N_mdm(szarray,randomSeedSeq)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( sampling ALIAS nond_sampling {N_mdm(utype,methodName_RANDOM_SAMPLING)}
    [ samples ALIAS initial_samples INTEGER {N_mdm(int,numSamples)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
      |
      incremental_lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      incremental_random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
      |
      ( low_discrepancy ALIAS qmc {N_mdm(utype,sampleType_SUBMETHOD_LOW_DISCREPANCY_SAMPLING)}
        [ 
          ( rank_1_lattice {N_mdm(true,rank1LatticeFlag)}
            [ no_random_shift {N_mdm(true,noRandomShiftFlag)} ]
            [ m_max INTEGER >= 0 {N_mdm(int,log2MaxPoints)} ]
            [ generating_vector {0}
              inline INTEGERLIST {N_mdm(ivec,generatingVector)}
              |
              file STRING {N_mdm(str,generatingVectorFileName)}
              |
              ( predefined {0}
                kuo {N_mdm(true,kuo)}
                |
                cools_kuo_nuyens {N_mdm(true,cools_kuo_nuyens)}
               )
             ]
            [ ordering {0}
              natural {N_mdm(true,naturalOrdering)}
              |
              radical_inverse {N_mdm(true,radicalInverseOrdering)}
             ]
           )
         ]
        [ 
          ( digital_net ALIAS sobol_sequence {N_mdm(true,digitalNetFlag)}
            [ no_digital_shift {N_mdm(true,noDigitalShiftFlag)} ]
            [ no_scrambling {N_mdm(true,noScramblingFlag)} ]
            [ integer_format {0}
              most_significant_bit_first {N_mdm(true,mostSignificantBitFirst)}
              |
              least_significant_bit_first {N_mdm(true,leastSignificantBitFirst)}
             ]
            [ m_max INTEGER >= 0 {N_mdm(int,log2MaxPoints)} ]
            [ t_max INTEGER >= 0 {N_mdm(int,numberOfBits)} ]
            [ t_scramble INTEGER >= 0 {N_mdm(int,scrambleSize)} ]
            [ generating_matrices {0}
              inline INTEGERLIST {N_mdm(ivec,generatingMatrices)}
              |
              file STRING {N_mdm(str,generatingMatricesFileName)}
              |
              ( predefined {0}
                joe_kuo {N_mdm(true,joe_kuo)}
                |
                sobol_order_2 {N_mdm(true,sobol_order_2)}
               )
             ]
            [ ordering {0}
              natural {N_mdm(true,naturalOrdering)}
              |
              gray_code {N_mdm(true,grayCodeOrdering)}
             ]
           )
         ]
       )
     ]
    [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
    [ d_optimal {N_mdm(true,dOptimal)}
      [ 
        candidate_designs INTEGER > 0 {N_mdm(sizet,numCandidateDesigns)}
        |
        leja_oversample_ratio REAL {N_mdm(Real,collocationRatio)}
       ]
     ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
      [ vbd_sampling_method {N_mdm(utype,vbdViaSamplingMethod)}
        ( binned {N_mdm(utype,vbdViaSamplingMethod_VBD_BINNED)}
          [ num_bins INTEGER {N_mdm(int,vbdViaSamplingNumBins)} ]
         )
        |
        pick_and_freeze {N_mdm(utype,vbdViaSamplingMethod_VBD_PICK_AND_FREEZE)}
       ]
     ]
    [ backfill {N_mdm(true,backfillFlag)} ]
    [ principal_components {N_mdm(true,pcaFlag)}
      [ percent_variance_explained REAL {N_mdm(Real,percentVarianceExplained)} ]
     ]
    [ wilks {N_mdm(true,wilksFlag)}
      [ order INTEGER {N_mdm(ushint,wilksOrder)} ]
      [ confidence_level REAL {N_mdm(Real,wilksConfidenceLevel)} ]
      [ one_sided_lower {N_mdm(type,wilksSidedInterval_ONE_SIDED_LOWER)} ]
      [ one_sided_upper {N_mdm(type,wilksSidedInterval_ONE_SIDED_UPPER)} ]
      [ two_sided {N_mdm(type,wilksSidedInterval_TWO_SIDED)} ]
     ]
    [ std_regression_coeffs {N_mdm(true,stdRegressionCoeffs)} ]
    [ tolerance_intervals {N_mdm(true,toleranceIntervalsFlag)}
      [ coverage REAL {N_mdm(Real01,tiCoverage)} ]
      [ confidence_level REAL {N_mdm(Real01,tiConfidenceLevel)} ]
     ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( multilevel_sampling ALIAS multilevel_mc ALIAS mlmc {N_mdm(utype,methodName_MULTILEVEL_SAMPLING)}
    [ seed_sequence INTEGERLIST {N_mdm(szarray,randomSeedSeq)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ pilot_samples ALIAS initial_samples INTEGERLIST {N_mdm(szarray,pilotSamples)} ]
    [ solution_mode {0}
      ( online_pilot {N_mdm(type,ensemblePilotSolnMode_ONLINE_PILOT)}
        [ relaxation {0}
          factor_sequence REALLIST {N_mdm(RealDL,relaxFactorSequence)}
          |
          fixed_factor REAL {N_mdm(Real,relaxFixedFactor)}
          |
          recursive_factor REAL {N_mdm(Real,relaxRecursiveFactor)}
         ]
        [ final_statistics {0}
          estimator_performance {N_mdm(utype,finalStatsType_ESTIMATOR_PERFORMANCE)}
          |
          ( qoi_statistics {N_mdm(utype,finalStatsType_QOI_STATISTICS)}
            [ final_moments {0}
              none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
              |
              standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
              |
              central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
             ]
            [ distribution {0}
              cumulative {N_mdm(type,distributionType_CUMULATIVE)}
              |
              complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
             ]
           )
         ]
       )
      |
      ( offline_pilot {N_mdm(type,ensemblePilotSolnMode_OFFLINE_PILOT)}
        [ final_statistics {0}
          estimator_performance {N_mdm(utype,finalStatsType_ESTIMATOR_PERFORMANCE)}
          |
          ( qoi_statistics {N_mdm(utype,finalStatsType_QOI_STATISTICS)}
            [ final_moments {0}
              none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
              |
              standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
              |
              central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
             ]
            [ distribution {0}
              cumulative {N_mdm(type,distributionType_CUMULATIVE)}
              |
              complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
             ]
           )
         ]
       )
      |
      online_projection {N_mdm(type,ensemblePilotSolnMode_ONLINE_PILOT_PROJECTION)}
      |
      offline_projection {N_mdm(type,ensemblePilotSolnMode_OFFLINE_PILOT_PROJECTION)}
     ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ weighted {N_mdm(utype,subMethod_SUBMETHOD_WEIGHTED_MLMC)}
      [ search_model_graphs {0}
        [ model_selection {N_mdm(type,modelSelectType_ALL_MODEL_COMBINATIONS)} ]
        no_recursion {N_mdm(type,dagRecursionType_NO_GRAPH_RECURSION)}
        |
        full_recursion {N_mdm(type,dagRecursionType_FULL_GRAPH_RECURSION)}
       ]
     ]
    [ export_sample_sequence {N_mdm(true,exportSampleSeqFlag)}
      [ 
        ( custom_annotated {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportSamplesFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportSamplesFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
       ]
     ]
    [ allocation_target {0}
      mean {N_mdm(type,allocationTarget_TARGET_MEAN)}
      |
      ( variance {N_mdm(type,allocationTarget_TARGET_VARIANCE)}
        [ optimization {N_mdm(true,useTargetVarianceOptimizationFlag)} ]
       )
      |
      ( standard_deviation {N_mdm(type,allocationTarget_TARGET_SIGMA)}
        [ optimization {N_mdm(true,useTargetVarianceOptimizationFlag)} ]
       )
      |
      ( scalarization {N_mdm(type,allocationTarget_TARGET_SCALARIZATION)}
        [ scalarization_response_mapping REALLIST {N_mdm(RealDL,scalarizationRespCoeffs)} ]
        [ optimization {N_mdm(true,useTargetVarianceOptimizationFlag)} ]
       )
     ]
    [ qoi_aggregation {0}
      sum {N_mdm(type,qoiAggregation_QOI_AGGREGATION_SUM)}
      |
      max {N_mdm(type,qoiAggregation_QOI_AGGREGATION_MAX)}
     ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ convergence_tolerance_type {0}
      relative {N_mdm(type,convergenceToleranceType_CONVERGENCE_TOLERANCE_TYPE_RELATIVE)}
      |
      absolute {N_mdm(type,convergenceToleranceType_CONVERGENCE_TOLERANCE_TYPE_ABSOLUTE)}
     ]
    [ convergence_tolerance_target {0}
      variance_constraint {N_mdm(type,convergenceToleranceTarget_CONVERGENCE_TOLERANCE_TARGET_VARIANCE_CONSTRAINT)}
      |
      cost_constraint {N_mdm(type,convergenceToleranceTarget_CONVERGENCE_TOLERANCE_TARGET_COST_CONSTRAINT)}
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( multifidelity_sampling ALIAS multifidelity_mc ALIAS mfmc {N_mdm(utype,methodName_MULTIFIDELITY_SAMPLING)}
    [ seed_sequence INTEGERLIST {N_mdm(szarray,randomSeedSeq)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ pilot_samples ALIAS initial_samples INTEGERLIST {N_mdm(szarray,pilotSamples)} ]
    [ solution_mode {0}
      ( online_pilot {N_mdm(type,ensemblePilotSolnMode_ONLINE_PILOT)}
        [ relaxation {0}
          factor_sequence REALLIST {N_mdm(RealDL,relaxFactorSequence)}
          |
          fixed_factor REAL {N_mdm(Real,relaxFixedFactor)}
          |
          recursive_factor REAL {N_mdm(Real,relaxRecursiveFactor)}
         ]
        [ final_statistics {0}
          estimator_performance {N_mdm(utype,finalStatsType_ESTIMATOR_PERFORMANCE)}
          |
          ( qoi_statistics {N_mdm(utype,finalStatsType_QOI_STATISTICS)}
            [ final_moments {0}
              none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
              |
              standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
              |
              central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
             ]
            [ distribution {0}
              cumulative {N_mdm(type,distributionType_CUMULATIVE)}
              |
              complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
             ]
           )
         ]
       )
      |
      ( offline_pilot {N_mdm(type,ensemblePilotSolnMode_OFFLINE_PILOT)}
        [ final_statistics {0}
          estimator_performance {N_mdm(utype,finalStatsType_ESTIMATOR_PERFORMANCE)}
          |
          ( qoi_statistics {N_mdm(utype,finalStatsType_QOI_STATISTICS)}
            [ final_moments {0}
              none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
              |
              standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
              |
              central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
             ]
            [ distribution {0}
              cumulative {N_mdm(type,distributionType_CUMULATIVE)}
              |
              complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
             ]
           )
         ]
       )
      |
      online_projection {N_mdm(type,ensemblePilotSolnMode_ONLINE_PILOT_PROJECTION)}
      |
      offline_projection {N_mdm(type,ensemblePilotSolnMode_OFFLINE_PILOT_PROJECTION)}
     ]
    [ numerical_solve {0}
      [ 
        fallback {N_mdm(utype,numericalSolveMode_NUMERICAL_FALLBACK)}
        |
        override {N_mdm(utype,numericalSolveMode_NUMERICAL_OVERRIDE)}
       ]
      [ 
        sqp {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL)}
        |
        nip {N_mdm(utype,optSubProbSolver_SUBMETHOD_OPTPP)}
        |
        global_local {N_mdm(utype,optSubProbSolver_SUBMETHOD_DIRECT_NPSOL_OPTPP)}
        |
        competed_local {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL_OPTPP)}
       ]
     ]
    [ search_model_graphs {0}
      [ model_selection {N_mdm(type,modelSelectType_ALL_MODEL_COMBINATIONS)} ]
      no_recursion {N_mdm(type,dagRecursionType_NO_GRAPH_RECURSION)}
      |
      full_recursion {N_mdm(type,dagRecursionType_FULL_GRAPH_RECURSION)}
     ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ export_sample_sequence {N_mdm(true,exportSampleSeqFlag)}
      [ 
        ( custom_annotated {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportSamplesFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportSamplesFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
       ]
     ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( multilevel_multifidelity_sampling ALIAS multilevel_multifidelity_mc ALIAS mlmfmc {N_mdm(utype,methodName_MULTILEVEL_MULTIFIDELITY_SAMPLING)}
    [ seed_sequence INTEGERLIST {N_mdm(szarray,randomSeedSeq)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ pilot_samples ALIAS initial_samples INTEGERLIST {N_mdm(szarray,pilotSamples)} ]
    [ solution_mode {0}
      ( online_pilot {N_mdm(type,ensemblePilotSolnMode_ONLINE_PILOT)}
        [ relaxation {0}
          factor_sequence REALLIST {N_mdm(RealDL,relaxFactorSequence)}
          |
          fixed_factor REAL {N_mdm(Real,relaxFixedFactor)}
          |
          recursive_factor REAL {N_mdm(Real,relaxRecursiveFactor)}
         ]
        [ final_statistics {0}
          estimator_performance {N_mdm(utype,finalStatsType_ESTIMATOR_PERFORMANCE)}
          |
          ( qoi_statistics {N_mdm(utype,finalStatsType_QOI_STATISTICS)}
            [ final_moments {0}
              none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
              |
              standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
              |
              central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
             ]
            [ distribution {0}
              cumulative {N_mdm(type,distributionType_CUMULATIVE)}
              |
              complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
             ]
           )
         ]
       )
      |
      ( offline_pilot {N_mdm(type,ensemblePilotSolnMode_OFFLINE_PILOT)}
        [ final_statistics {0}
          estimator_performance {N_mdm(utype,finalStatsType_ESTIMATOR_PERFORMANCE)}
          |
          ( qoi_statistics {N_mdm(utype,finalStatsType_QOI_STATISTICS)}
            [ final_moments {0}
              none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
              |
              standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
              |
              central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
             ]
            [ distribution {0}
              cumulative {N_mdm(type,distributionType_CUMULATIVE)}
              |
              complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
             ]
           )
         ]
       )
      |
      online_projection {N_mdm(type,ensemblePilotSolnMode_ONLINE_PILOT_PROJECTION)}
      |
      offline_projection {N_mdm(type,ensemblePilotSolnMode_OFFLINE_PILOT_PROJECTION)}
     ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ export_sample_sequence {N_mdm(true,exportSampleSeqFlag)}
      [ 
        ( custom_annotated {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportSamplesFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportSamplesFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
       ]
     ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( approximate_control_variate ALIAS acv_sampling {N_mdm(utype,methodName_APPROXIMATE_CONTROL_VARIATE)}
    acv_independent_sampling ALIAS acv_is {N_mdm(utype,subMethod_SUBMETHOD_ACV_IS)}
    |
    acv_multifidelity ALIAS acv_mf {N_mdm(utype,subMethod_SUBMETHOD_ACV_MF)}
    |
    acv_recursive_diff ALIAS acv_rd {N_mdm(utype,subMethod_SUBMETHOD_ACV_RD)}
    [ search_model_graphs {0}
      [ model_selection {N_mdm(type,modelSelectType_ALL_MODEL_COMBINATIONS)} ]
      no_recursion {N_mdm(type,dagRecursionType_NO_GRAPH_RECURSION)}
      |
      kl_recursion {N_mdm(type,dagRecursionType_KL_GRAPH_RECURSION)}
      |
      ( partial_recursion {N_mdm(type,dagRecursionType_PARTIAL_GRAPH_RECURSION)}
        depth_limit INTEGER {N_mdm(ushint,dagDepthLimit)}
       )
      |
      full_recursion {N_mdm(type,dagRecursionType_FULL_GRAPH_RECURSION)}
     ]
    [ pilot_samples ALIAS initial_samples INTEGERLIST {N_mdm(szarray,pilotSamples)} ]
    [ solution_mode {0}
      ( online_pilot {N_mdm(type,ensemblePilotSolnMode_ONLINE_PILOT)}
        [ relaxation {0}
          factor_sequence REALLIST {N_mdm(RealDL,relaxFactorSequence)}
          |
          fixed_factor REAL {N_mdm(Real,relaxFixedFactor)}
          |
          recursive_factor REAL {N_mdm(Real,relaxRecursiveFactor)}
         ]
        [ final_statistics {0}
          estimator_performance {N_mdm(utype,finalStatsType_ESTIMATOR_PERFORMANCE)}
          |
          ( qoi_statistics {N_mdm(utype,finalStatsType_QOI_STATISTICS)}
            [ final_moments {0}
              none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
              |
              standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
              |
              central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
             ]
            [ distribution {0}
              cumulative {N_mdm(type,distributionType_CUMULATIVE)}
              |
              complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
             ]
           )
         ]
       )
      |
      ( offline_pilot {N_mdm(type,ensemblePilotSolnMode_OFFLINE_PILOT)}
        [ final_statistics {0}
          estimator_performance {N_mdm(utype,finalStatsType_ESTIMATOR_PERFORMANCE)}
          |
          ( qoi_statistics {N_mdm(utype,finalStatsType_QOI_STATISTICS)}
            [ final_moments {0}
              none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
              |
              standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
              |
              central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
             ]
            [ distribution {0}
              cumulative {N_mdm(type,distributionType_CUMULATIVE)}
              |
              complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
             ]
           )
         ]
       )
      |
      online_projection {N_mdm(type,ensemblePilotSolnMode_ONLINE_PILOT_PROJECTION)}
      |
      offline_projection {N_mdm(type,ensemblePilotSolnMode_OFFLINE_PILOT_PROJECTION)}
     ]
    [ truth_fixed_by_pilot {N_mdm(true,truthPilotConstraint)} ]
    [ 
      sqp {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL)}
      |
      nip {N_mdm(utype,optSubProbSolver_SUBMETHOD_OPTPP)}
      |
      global_local {N_mdm(utype,optSubProbSolver_SUBMETHOD_DIRECT_NPSOL_OPTPP)}
      |
      competed_local {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL_OPTPP)}
     ]
    [ seed_sequence INTEGERLIST {N_mdm(szarray,randomSeedSeq)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ export_sample_sequence {N_mdm(true,exportSampleSeqFlag)}
      [ 
        ( custom_annotated {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportSamplesFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportSamplesFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
       ]
     ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( multilevel_blue {N_mdm(utype,methodName_MULTILEVEL_BLUE)}
    [ group_throttle {0}
      mfmc_groups {N_mdm(type,groupThrottleType_MFMC_ESTIMATOR_GROUPS)}
      |
      common_groups {N_mdm(type,groupThrottleType_COMMON_ESTIMATOR_GROUPS)}
      |
      group_size INTEGER > 0 {N_mdm(ushint,groupSizeThrottle)}
      |
      best_conditioned INTEGER > 0 {N_mdm(sizet,rCondBestThrottle)}
      |
      rcond_tolerance REAL >= 0 {N_mdm(Real,rCondTolThrottle)}
     ]
    [ pilot_samples ALIAS initial_samples INTEGERLIST {N_mdm(szarray,pilotSamples)}
      [ independent {N_mdm(type,pilotGroupSampling_INDEPENDENT_PILOT)} ]
     ]
    [ solution_mode {0}
      ( online_pilot {N_mdm(type,ensemblePilotSolnMode_ONLINE_PILOT)}
        [ relaxation {0}
          factor_sequence REALLIST {N_mdm(RealDL,relaxFactorSequence)}
          |
          fixed_factor REAL {N_mdm(Real,relaxFixedFactor)}
          |
          recursive_factor REAL {N_mdm(Real,relaxRecursiveFactor)}
         ]
        [ final_statistics {0}
          estimator_performance {N_mdm(utype,finalStatsType_ESTIMATOR_PERFORMANCE)}
          |
          ( qoi_statistics {N_mdm(utype,finalStatsType_QOI_STATISTICS)}
            [ final_moments {0}
              none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
              |
              standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
              |
              central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
             ]
            [ distribution {0}
              cumulative {N_mdm(type,distributionType_CUMULATIVE)}
              |
              complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
             ]
           )
         ]
       )
      |
      ( offline_pilot {N_mdm(type,ensemblePilotSolnMode_OFFLINE_PILOT)}
        [ final_statistics {0}
          estimator_performance {N_mdm(utype,finalStatsType_ESTIMATOR_PERFORMANCE)}
          |
          ( qoi_statistics {N_mdm(utype,finalStatsType_QOI_STATISTICS)}
            [ final_moments {0}
              none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
              |
              standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
              |
              central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
             ]
            [ distribution {0}
              cumulative {N_mdm(type,distributionType_CUMULATIVE)}
              |
              complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
             ]
           )
         ]
       )
      |
      online_projection {N_mdm(type,ensemblePilotSolnMode_ONLINE_PILOT_PROJECTION)}
      |
      offline_projection {N_mdm(type,ensemblePilotSolnMode_OFFLINE_PILOT_PROJECTION)}
     ]
    [ 
      sqp {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL)}
      |
      nip {N_mdm(utype,optSubProbSolver_SUBMETHOD_OPTPP)}
      |
      global_local {N_mdm(utype,optSubProbSolver_SUBMETHOD_DIRECT_NPSOL_OPTPP)}
      |
      competed_local {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL_OPTPP)}
     ]
    [ seed_sequence INTEGERLIST {N_mdm(szarray,randomSeedSeq)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ sample_type {0}
      lhs {N_mdm(utype,sampleType_SUBMETHOD_LHS)}
      |
      random {N_mdm(utype,sampleType_SUBMETHOD_RANDOM)}
     ]
    [ export_sample_sequence {N_mdm(true,exportSampleSeqFlag)}
      [ 
        ( custom_annotated {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportSamplesFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportSamplesFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
       ]
     ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( importance_sampling ALIAS nond_importance_sampling {N_mdm(utype,methodName_IMPORTANCE_SAMPLING)}
    [ samples ALIAS initial_samples INTEGER {N_mdm(int,numSamples)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    import {N_mdm(utype,integrationRefine_IS)}
    |
    adapt_import {N_mdm(utype,integrationRefine_AIS)}
    |
    mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
    [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( gpais ALIAS gaussian_process_adaptive_importance_sampling {N_mdm(utype,methodName_GPAIS)}
    [ build_samples ALIAS samples INTEGER {N_mdm(int,buildSamples)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ samples_on_emulator INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importBuildActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( adaptive_sampling ALIAS nond_adaptive_sampling {N_mdm(utype,methodName_ADAPTIVE_SAMPLING)}
    [ initial_samples ALIAS samples INTEGER {N_mdm(int,numSamples)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ samples_on_emulator INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ fitness_metric {0}
      predicted_variance {N_mdm(lit,fitnessMetricType_predicted_variance)}
      |
      distance {N_mdm(lit,fitnessMetricType_distance)}
      |
      gradient {N_mdm(lit,fitnessMetricType_gradient)}
     ]
    [ batch_selection {0}
      naive {N_mdm(lit,batchSelectionType_naive)}
      |
      distance_penalty {N_mdm(lit,batchSelectionType_distance)}
      |
      topology {N_mdm(lit,batchSelectionType_topology)}
      |
      constant_liar {N_mdm(lit,batchSelectionType_cl)}
     ]
    [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
    [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importBuildActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ misc_options STRINGLIST {N_mdm(strL,miscOptions)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( pof_darts ALIAS nond_pof_darts {N_mdm(utype,methodName_POF_DARTS)}
    build_samples ALIAS samples INTEGER {N_mdm(int,buildSamples)}
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ lipschitz {0}
      local {N_mdm(lit,lipschitzType_local)}
      |
      global {N_mdm(lit,lipschitzType_global)}
     ]
    [ samples_on_emulator INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( rkd_darts ALIAS nond_rkd_darts {N_mdm(utype,methodName_RKD_DARTS)}
    build_samples ALIAS samples INTEGER {N_mdm(int,buildSamples)}
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ lipschitz {0}
      local {N_mdm(lit,lipschitzType_local)}
      |
      global {N_mdm(lit,lipschitzType_global)}
     ]
    [ samples_on_emulator INTEGER {N_mdm(int,samplesOnEmulator)} ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( global_evidence ALIAS nond_global_evidence {N_mdm(utype,methodName_GLOBAL_EVIDENCE)}
    [ samples INTEGER {N_mdm(int,numSamples)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ 
      ( sbgo {N_mdm(utype,optSubProbSolver_SUBMETHOD_SBGO)}
        [ gaussian_process ALIAS kriging {0}
          surfpack {N_mdm(type,emulatorType_KRIGING_EMULATOR)}
          |
          dakota {N_mdm(type,emulatorType_GP_EMULATOR)}
          |
          ( experimental {N_mdm(type,emulatorType_EXPGP_EMULATOR)}
            [ options_file STRING {N_mdm(str,advancedOptionsFilename)} ]
           )
         ]
        [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
        [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
          [ 
            ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
              [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
              [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
              [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
             )
            |
            annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
            |
            freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
           ]
          [ active_only {N_mdm(true,importBuildActive)} ]
         ]
        [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
          [ 
            ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
              [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
              [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
              [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
             )
            |
            annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
            |
            freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
           ]
         ]
       )
      |
      ( ego {N_mdm(utype,optSubProbSolver_SUBMETHOD_EGO)}
        [ gaussian_process ALIAS kriging {0}
          ( surfpack {N_mdm(type,emulatorType_KRIGING_EMULATOR)}
            [ export_model {N_mdm(true,exportSurrogate)}
              [ filename_prefix STRING {N_mdm(str,modelExportPrefix)} ]
              ( formats {0}
                [ text_archive {N_mdm(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
                [ binary_archive {N_mdm(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
               )
             ]
           )
          |
          dakota {N_mdm(type,emulatorType_GP_EMULATOR)}
          |
          ( experimental {N_mdm(type,emulatorType_EXPGP_EMULATOR)}
            [ export_model {N_mdm(true,exportSurrogate)}
              [ filename_prefix STRING {N_mdm(str,modelExportPrefix)} ]
              ( formats {0}
                [ text_archive {N_mdm(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
                [ binary_archive {N_mdm(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
               )
             ]
            [ options_file STRING {N_mdm(str,advancedOptionsFilename)} ]
           )
         ]
        [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
        [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
          [ 
            ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
              [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
              [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
              [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
             )
            |
            annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
            |
            freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
           ]
          [ active_only {N_mdm(true,importBuildActive)} ]
         ]
        [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
          [ 
            ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
              [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
              [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
              [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
             )
            |
            annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
            |
            freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
           ]
         ]
       )
      |
      ea {N_mdm(utype,optSubProbSolver_SUBMETHOD_EA)}
      |
      lhs {N_mdm(utype,optSubProbSolver_SUBMETHOD_LHS)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( global_interval_est ALIAS nond_global_interval_est {N_mdm(utype,methodName_GLOBAL_INTERVAL_EST)}
    [ samples INTEGER {N_mdm(int,numSamples)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_function_evaluations INTEGER >= 0 {N_mdm(sizet,maxFunctionEvals)} ]
    [ 
      ( sbgo {N_mdm(utype,optSubProbSolver_SUBMETHOD_SBGO)}
        [ gaussian_process ALIAS kriging {0}
          surfpack {N_mdm(type,emulatorType_KRIGING_EMULATOR)}
          |
          dakota {N_mdm(type,emulatorType_GP_EMULATOR)}
          |
          ( experimental {N_mdm(type,emulatorType_EXPGP_EMULATOR)}
            [ options_file STRING {N_mdm(str,advancedOptionsFilename)} ]
           )
         ]
        [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
        [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
          [ 
            ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
              [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
              [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
              [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
             )
            |
            annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
            |
            freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
           ]
          [ active_only {N_mdm(true,importBuildActive)} ]
         ]
        [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
          [ 
            ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
              [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
              [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
              [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
             )
            |
            annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
            |
            freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
           ]
         ]
       )
      |
      ( ego {N_mdm(utype,optSubProbSolver_SUBMETHOD_EGO)}
        [ gaussian_process ALIAS kriging {0}
          ( surfpack {N_mdm(type,emulatorType_KRIGING_EMULATOR)}
            [ export_model {N_mdm(true,exportSurrogate)}
              [ filename_prefix STRING {N_mdm(str,modelExportPrefix)} ]
              ( formats {0}
                [ text_archive {N_mdm(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
                [ binary_archive {N_mdm(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
               )
             ]
           )
          |
          dakota {N_mdm(type,emulatorType_GP_EMULATOR)}
          |
          ( experimental {N_mdm(type,emulatorType_EXPGP_EMULATOR)}
            [ export_model {N_mdm(true,exportSurrogate)}
              [ filename_prefix STRING {N_mdm(str,modelExportPrefix)} ]
              ( formats {0}
                [ text_archive {N_mdm(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
                [ binary_archive {N_mdm(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
               )
             ]
            [ options_file STRING {N_mdm(str,advancedOptionsFilename)} ]
           )
         ]
        [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
        [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
          [ 
            ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
              [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
              [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
              [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
             )
            |
            annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
            |
            freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
           ]
          [ active_only {N_mdm(true,importBuildActive)} ]
         ]
        [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
          [ 
            ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
              [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
              [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
              [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
             )
            |
            annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
            |
            freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
           ]
         ]
       )
      |
      ea {N_mdm(utype,optSubProbSolver_SUBMETHOD_EA)}
      |
      lhs {N_mdm(utype,optSubProbSolver_SUBMETHOD_LHS)}
     ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( bayes_calibration ALIAS nond_bayes_calibration {N_mdm(utype,methodName_BAYES_CALIBRATION)}
    ( queso {N_mdm(utype,subMethod_SUBMETHOD_QUESO)}
      chain_samples ALIAS samples INTEGER {N_mdm(int,chainSamples)}
      [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
      [ rng {0}
        mt19937 {N_mdm(lit,rngName_mt19937)}
        |
        rnum2 {N_mdm(lit,rngName_rnum2)}
       ]
      [ emulator {0}
        ( gaussian_process ALIAS kriging {0}
          surfpack {N_mdm(type,emulatorType_KRIGING_EMULATOR)}
          |
          dakota {N_mdm(type,emulatorType_GP_EMULATOR)}
          [ build_samples INTEGER {N_mdm(int,buildSamples)} ]
          [ posterior_adaptive {N_mdm(true,adaptPosteriorRefine)} ]
          [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
            [ 
              ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
               )
              |
              annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
              |
              freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
             ]
            [ active_only {N_mdm(true,importBuildActive)} ]
           ]
         )
        |
        ( pce {N_mdm(type,emulatorType_PCE_EMULATOR)}
          [ p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
            uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
            |
            ( dimension_adaptive {0}
              sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
              |
              decay {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_DECAY)}
              |
              generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          ( quadrature_order INTEGER {N_mdm(ushint,quadratureOrder)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level INTEGER {N_mdm(ushint,sparseGridLevel)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          cubature_integrand INTEGER {N_mdm(ushint,cubIntOrder)}
          |
          ( expansion_order INTEGER {N_mdm(ushint,expansionOrder)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ basis_type {0}
              tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
              |
              total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
              |
              ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
                [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
                [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
               )
             ]
            ( collocation_points INTEGER {N_mdm(sizet,collocationPoints)}
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( expansion_samples INTEGER {N_mdm(sizet,expansionSamples)}
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
             )
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
            [ posterior_adaptive {N_mdm(true,adaptPosteriorRefine)} ]
           )
          |
          ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
            collocation_points INTEGER {N_mdm(sizet,collocationPoints)}
            [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
            [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
            [ posterior_adaptive {N_mdm(true,adaptPosteriorRefine)} ]
           )
          |
          import_expansion_file STRING {N_mdm(str,importExpansionFile)}
          [ 
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ normalized {N_mdm(true,normalizedCoeffs)} ]
          [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( ml_pce {N_mdm(type,emulatorType_ML_PCE_EMULATOR)}
          [ allocation_control {0}
            ( estimator_variance {N_mdm(type,multilevAllocControl_ESTIMATOR_VARIANCE)}
              [ estimator_rate REAL {N_mdm(Real,multilevEstimatorRate)} ]
             )
            |
            rip_sampling {N_mdm(type,multilevAllocControl_RIP_SAMPLING)}
           ]
          [ discrepancy_emulation {0}
            distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
            |
            recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
           ]
          ( expansion_order_sequence INTEGERLIST {N_mdm(usharray,expansionOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ basis_type {0}
              tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
              |
              total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
              |
              ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
                [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
                [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
               )
             ]
            ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
              [ collocation_points_sequence ALIAS pilot_samples INTEGERLIST {N_mdm(szarray,collocationPointsSeq)} ]
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( expansion_samples_sequence INTEGERLIST {N_mdm(szarray,expansionSamplesSeq)}
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
             )
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          |
          ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
            collocation_points_sequence INTEGERLIST {N_mdm(szarray,collocationPointsSeq)}
            [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
            [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          [ 
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ normalized {N_mdm(true,normalizedCoeffs)} ]
          [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( mf_pce {N_mdm(type,emulatorType_MF_PCE_EMULATOR)}
          [ p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
            uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
            |
            ( dimension_adaptive {0}
              sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
              |
              decay {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_DECAY)}
              |
              generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          [ allocation_control {0}
            greedy {N_mdm(type,multilevAllocControl_GREEDY_REFINEMENT)}
           ]
          [ discrepancy_emulation {0}
            distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
            |
            recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
           ]
          ( quadrature_order_sequence INTEGERLIST {N_mdm(usharray,quadratureOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level_sequence INTEGERLIST {N_mdm(usharray,sparseGridLevelSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( expansion_order_sequence INTEGERLIST {N_mdm(usharray,expansionOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ basis_type {0}
              tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
              |
              total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
              |
              ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
                [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
                [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
               )
             ]
            ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
              [ collocation_points_sequence ALIAS pilot_samples INTEGERLIST {N_mdm(szarray,collocationPointsSeq)} ]
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( expansion_samples_sequence INTEGERLIST {N_mdm(szarray,expansionSamplesSeq)}
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
             )
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          |
          ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
            collocation_points_sequence INTEGERLIST {N_mdm(szarray,collocationPointsSeq)}
            [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
            [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          [ 
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ normalized {N_mdm(true,normalizedCoeffs)} ]
          [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( sc {N_mdm(type,emulatorType_SC_EMULATOR)}
          [ 
            ( p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
             )
            |
            ( h_refinement {N_mdm(type,refinementType_H_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
              |
              local_adaptive {N_mdm(type,refinementControl_LOCAL_ADAPTIVE_CONTROL)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          ( quadrature_order INTEGER {N_mdm(ushint,quadratureOrder)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level INTEGER {N_mdm(ushint,sparseGridLevel)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nodal {N_mdm(type,expansionBasisType_NODAL_INTERPOLANT)}
              |
              hierarchical {N_mdm(type,expansionBasisType_HIERARCHICAL_INTERPOLANT)}
             ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          [ 
            piecewise {NIDRProblemDescDB::method_piecewise}
            |
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( mf_sc {N_mdm(type,emulatorType_MF_SC_EMULATOR)}
          [ 
            ( p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
             )
            |
            ( h_refinement {N_mdm(type,refinementType_H_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
              |
              local_adaptive {N_mdm(type,refinementControl_LOCAL_ADAPTIVE_CONTROL)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          [ allocation_control {0}
            greedy {N_mdm(type,multilevAllocControl_GREEDY_REFINEMENT)}
           ]
          [ discrepancy_emulation {0}
            distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
            |
            recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
           ]
          ( quadrature_order_sequence INTEGERLIST {N_mdm(usharray,quadratureOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level_sequence INTEGERLIST {N_mdm(usharray,sparseGridLevelSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nodal {N_mdm(type,expansionBasisType_NODAL_INTERPOLANT)}
              |
              hierarchical {N_mdm(type,expansionBasisType_HIERARCHICAL_INTERPOLANT)}
             ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          [ 
            piecewise {NIDRProblemDescDB::method_piecewise}
            |
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
       ]
      [ standardized_space {N_mdm(true,standardizedSpace)} ]
      [ logit_transform {N_mdm(true,logitTransform)} ]
      [ export_chain_points_file STRING {N_mdm(str,exportMCMCPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,exportSamplesFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,exportSamplesFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
         ]
       ]
      [ 
        dram {N_mdm(lit,mcmcType_dram)}
        |
        delayed_rejection {N_mdm(lit,mcmcType_delayed_rejection)}
        |
        adaptive_metropolis {N_mdm(lit,mcmcType_adaptive_metropolis)}
        |
        metropolis_hastings {N_mdm(lit,mcmcType_metropolis_hastings)}
        |
        multilevel {N_mdm(lit,mcmcType_multilevel)}
       ]
      [ pre_solve {0}
        sqp {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL)}
        |
        nip {N_mdm(utype,optSubProbSolver_SUBMETHOD_OPTPP)}
        |
        none {N_mdm(utype,optSubProbSolver_SUBMETHOD_NONE)}
       ]
      [ proposal_covariance {N_mdm(lit,proposalCovType_user)}
        ( prior {N_mdm(lit,proposalCovType_prior)}
          [ multiplier REAL > 0.0 {N_mdm(Real,priorPropCovMult)} ]
         )
        |
        ( derivatives {N_mdm(lit,proposalCovType_derivatives)}
          [ update_period INTEGER {N_mdm(int,proposalCovUpdatePeriod)} ]
         )
        |
        ( values REALLIST {N_mdm(RealDL,proposalCovData)}
          diagonal {N_mdm(lit,proposalCovInputType_diagonal)}
          |
          matrix {N_mdm(lit,proposalCovInputType_matrix)}
         )
        |
        ( filename STRING {N_mdm(str,proposalCovFile)}
          diagonal {N_mdm(lit,proposalCovInputType_diagonal)}
          |
          matrix {N_mdm(lit,proposalCovInputType_matrix)}
         )
       ]
      [ options_file STRING {N_mdm(str,advancedOptionsFilename)} ]
     )
    |
    ( gpmsa {N_mdm(utype,subMethod_SUBMETHOD_GPMSA)}
      chain_samples ALIAS samples INTEGER {N_mdm(int,chainSamples)}
      [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
      [ rng {0}
        mt19937 {N_mdm(lit,rngName_mt19937)}
        |
        rnum2 {N_mdm(lit,rngName_rnum2)}
       ]
      build_samples INTEGER {N_mdm(int,buildSamples)}
      [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
         ]
       ]
      [ standardized_space {N_mdm(true,standardizedSpace)} ]
      [ logit_transform {N_mdm(true,logitTransform)} ]
      [ gpmsa_normalize {N_mdm(true,gpmsaNormalize)} ]
      [ export_chain_points_file STRING {N_mdm(str,exportMCMCPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,exportSamplesFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,exportSamplesFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
         ]
       ]
      [ 
        dram {N_mdm(lit,mcmcType_dram)}
        |
        delayed_rejection {N_mdm(lit,mcmcType_delayed_rejection)}
        |
        adaptive_metropolis {N_mdm(lit,mcmcType_adaptive_metropolis)}
        |
        metropolis_hastings {N_mdm(lit,mcmcType_metropolis_hastings)}
       ]
      [ proposal_covariance {N_mdm(lit,proposalCovType_user)}
        ( prior {N_mdm(lit,proposalCovType_prior)}
          [ multiplier REAL > 0.0 {N_mdm(Real,priorPropCovMult)} ]
         )
        |
        ( derivatives {N_mdm(lit,proposalCovType_derivatives)}
          [ update_period INTEGER {N_mdm(int,proposalCovUpdatePeriod)} ]
         )
        |
        ( values REALLIST {N_mdm(RealDL,proposalCovData)}
          diagonal {N_mdm(lit,proposalCovInputType_diagonal)}
          |
          matrix {N_mdm(lit,proposalCovInputType_matrix)}
         )
        |
        ( filename STRING {N_mdm(str,proposalCovFile)}
          diagonal {N_mdm(lit,proposalCovInputType_diagonal)}
          |
          matrix {N_mdm(lit,proposalCovInputType_matrix)}
         )
       ]
      [ options_file STRING {N_mdm(str,advancedOptionsFilename)} ]
     )
    |
    ( wasabi {N_mdm(utype,subMethod_SUBMETHOD_WASABI)}
      pushforward_samples INTEGER {N_mdm(int,numPushforwardSamples)}
      [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
      [ emulator {0}
        ( gaussian_process ALIAS kriging {0}
          surfpack {N_mdm(type,emulatorType_KRIGING_EMULATOR)}
          |
          dakota {N_mdm(type,emulatorType_GP_EMULATOR)}
          [ build_samples INTEGER {N_mdm(int,buildSamples)} ]
          [ posterior_adaptive {N_mdm(true,adaptPosteriorRefine)} ]
          [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
            [ 
              ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
               )
              |
              annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
              |
              freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
             ]
            [ active_only {N_mdm(true,importBuildActive)} ]
           ]
         )
        |
        ( pce {N_mdm(type,emulatorType_PCE_EMULATOR)}
          [ p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
            uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
            |
            ( dimension_adaptive {0}
              sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
              |
              decay {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_DECAY)}
              |
              generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          ( quadrature_order INTEGER {N_mdm(ushint,quadratureOrder)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level INTEGER {N_mdm(ushint,sparseGridLevel)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          cubature_integrand INTEGER {N_mdm(ushint,cubIntOrder)}
          |
          ( expansion_order INTEGER {N_mdm(ushint,expansionOrder)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ basis_type {0}
              tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
              |
              total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
              |
              ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
                [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
                [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
               )
             ]
            ( collocation_points INTEGER {N_mdm(sizet,collocationPoints)}
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( expansion_samples INTEGER {N_mdm(sizet,expansionSamples)}
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
             )
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
            [ posterior_adaptive {N_mdm(true,adaptPosteriorRefine)} ]
           )
          |
          ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
            collocation_points INTEGER {N_mdm(sizet,collocationPoints)}
            [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
            [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
            [ posterior_adaptive {N_mdm(true,adaptPosteriorRefine)} ]
           )
          |
          import_expansion_file STRING {N_mdm(str,importExpansionFile)}
          [ 
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ normalized {N_mdm(true,normalizedCoeffs)} ]
          [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( ml_pce {N_mdm(type,emulatorType_ML_PCE_EMULATOR)}
          [ allocation_control {0}
            ( estimator_variance {N_mdm(type,multilevAllocControl_ESTIMATOR_VARIANCE)}
              [ estimator_rate REAL {N_mdm(Real,multilevEstimatorRate)} ]
             )
            |
            rip_sampling {N_mdm(type,multilevAllocControl_RIP_SAMPLING)}
           ]
          [ discrepancy_emulation {0}
            distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
            |
            recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
           ]
          ( expansion_order_sequence INTEGERLIST {N_mdm(usharray,expansionOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ basis_type {0}
              tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
              |
              total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
              |
              ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
                [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
                [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
               )
             ]
            ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
              [ collocation_points_sequence ALIAS pilot_samples INTEGERLIST {N_mdm(szarray,collocationPointsSeq)} ]
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( expansion_samples_sequence INTEGERLIST {N_mdm(szarray,expansionSamplesSeq)}
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
             )
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          |
          ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
            collocation_points_sequence INTEGERLIST {N_mdm(szarray,collocationPointsSeq)}
            [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
            [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          [ 
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ normalized {N_mdm(true,normalizedCoeffs)} ]
          [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( mf_pce {N_mdm(type,emulatorType_MF_PCE_EMULATOR)}
          [ p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
            uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
            |
            ( dimension_adaptive {0}
              sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
              |
              decay {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_DECAY)}
              |
              generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          [ allocation_control {0}
            greedy {N_mdm(type,multilevAllocControl_GREEDY_REFINEMENT)}
           ]
          [ discrepancy_emulation {0}
            distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
            |
            recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
           ]
          ( quadrature_order_sequence INTEGERLIST {N_mdm(usharray,quadratureOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level_sequence INTEGERLIST {N_mdm(usharray,sparseGridLevelSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( expansion_order_sequence INTEGERLIST {N_mdm(usharray,expansionOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ basis_type {0}
              tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
              |
              total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
              |
              ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
                [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
                [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
               )
             ]
            ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
              [ collocation_points_sequence ALIAS pilot_samples INTEGERLIST {N_mdm(szarray,collocationPointsSeq)} ]
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( expansion_samples_sequence INTEGERLIST {N_mdm(szarray,expansionSamplesSeq)}
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
             )
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          |
          ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
            collocation_points_sequence INTEGERLIST {N_mdm(szarray,collocationPointsSeq)}
            [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
            [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          [ 
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ normalized {N_mdm(true,normalizedCoeffs)} ]
          [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( sc {N_mdm(type,emulatorType_SC_EMULATOR)}
          [ 
            ( p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
             )
            |
            ( h_refinement {N_mdm(type,refinementType_H_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
              |
              local_adaptive {N_mdm(type,refinementControl_LOCAL_ADAPTIVE_CONTROL)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          ( quadrature_order INTEGER {N_mdm(ushint,quadratureOrder)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level INTEGER {N_mdm(ushint,sparseGridLevel)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nodal {N_mdm(type,expansionBasisType_NODAL_INTERPOLANT)}
              |
              hierarchical {N_mdm(type,expansionBasisType_HIERARCHICAL_INTERPOLANT)}
             ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          [ 
            piecewise {NIDRProblemDescDB::method_piecewise}
            |
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( mf_sc {N_mdm(type,emulatorType_MF_SC_EMULATOR)}
          [ 
            ( p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
             )
            |
            ( h_refinement {N_mdm(type,refinementType_H_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
              |
              local_adaptive {N_mdm(type,refinementControl_LOCAL_ADAPTIVE_CONTROL)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          [ allocation_control {0}
            greedy {N_mdm(type,multilevAllocControl_GREEDY_REFINEMENT)}
           ]
          [ discrepancy_emulation {0}
            distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
            |
            recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
           ]
          ( quadrature_order_sequence INTEGERLIST {N_mdm(usharray,quadratureOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level_sequence INTEGERLIST {N_mdm(usharray,sparseGridLevelSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nodal {N_mdm(type,expansionBasisType_NODAL_INTERPOLANT)}
              |
              hierarchical {N_mdm(type,expansionBasisType_HIERARCHICAL_INTERPOLANT)}
             ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          [ 
            piecewise {NIDRProblemDescDB::method_piecewise}
            |
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
       ]
      [ standardized_space {N_mdm(true,standardizedSpace)} ]
      ( data_distribution {0}
        ( gaussian {0}
          means REALLIST {N_mdm(RealDL,dataDistMeans)}
          ( covariance REALLIST {N_mdm(RealDL,dataDistCovariance)}
            diagonal {N_mdm(lit,dataDistCovInputType_diagonal)}
            |
            matrix {N_mdm(lit,dataDistCovInputType_matrix)}
           )
         )
        |
        obs_data_filename STRING {N_mdm(str,dataDistFile)}
       )
      [ posterior_samples_import_filename STRING {N_mdm(str,posteriorSamplesImportFilename)} ]
      [ generate_posterior_samples {N_mdm(true,generatePosteriorSamples)}
        [ posterior_samples_export_filename STRING {N_mdm(str,posteriorSamplesExportFilename)} ]
       ]
      [ evaluate_posterior_density {N_mdm(true,evaluatePosteriorDensity)}
        [ posterior_density_export_filename STRING {N_mdm(str,posteriorDensityExportFilename)} ]
       ]
     )
    |
    ( dream {N_mdm(utype,subMethod_SUBMETHOD_DREAM)}
      chain_samples ALIAS samples INTEGER {N_mdm(int,chainSamples)}
      [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
      [ chains INTEGER >= 3 {N_mdm(int,numChains)} ]
      [ num_cr INTEGER >= 1 {N_mdm(int,numCR)} ]
      [ crossover_chain_pairs INTEGER >= 0 {N_mdm(int,crossoverChainPairs)} ]
      [ gr_threshold REAL > 0.0 {N_mdm(Real,grThreshold)} ]
      [ jump_step INTEGER >= 0 {N_mdm(int,jumpStep)} ]
      [ emulator {0}
        ( gaussian_process ALIAS kriging {0}
          surfpack {N_mdm(type,emulatorType_KRIGING_EMULATOR)}
          |
          dakota {N_mdm(type,emulatorType_GP_EMULATOR)}
          [ build_samples INTEGER {N_mdm(int,buildSamples)} ]
          [ posterior_adaptive {N_mdm(true,adaptPosteriorRefine)} ]
          [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
            [ 
              ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
               )
              |
              annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
              |
              freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
             ]
            [ active_only {N_mdm(true,importBuildActive)} ]
           ]
         )
        |
        ( pce {N_mdm(type,emulatorType_PCE_EMULATOR)}
          [ p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
            uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
            |
            ( dimension_adaptive {0}
              sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
              |
              decay {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_DECAY)}
              |
              generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          ( quadrature_order INTEGER {N_mdm(ushint,quadratureOrder)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level INTEGER {N_mdm(ushint,sparseGridLevel)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          cubature_integrand INTEGER {N_mdm(ushint,cubIntOrder)}
          |
          ( expansion_order INTEGER {N_mdm(ushint,expansionOrder)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ basis_type {0}
              tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
              |
              total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
              |
              ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
                [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
                [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
               )
             ]
            ( collocation_points INTEGER {N_mdm(sizet,collocationPoints)}
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( expansion_samples INTEGER {N_mdm(sizet,expansionSamples)}
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
             )
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
            [ posterior_adaptive {N_mdm(true,adaptPosteriorRefine)} ]
           )
          |
          ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
            collocation_points INTEGER {N_mdm(sizet,collocationPoints)}
            [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
            [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
            [ posterior_adaptive {N_mdm(true,adaptPosteriorRefine)} ]
           )
          |
          import_expansion_file STRING {N_mdm(str,importExpansionFile)}
          [ 
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ normalized {N_mdm(true,normalizedCoeffs)} ]
          [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( ml_pce {N_mdm(type,emulatorType_ML_PCE_EMULATOR)}
          [ allocation_control {0}
            ( estimator_variance {N_mdm(type,multilevAllocControl_ESTIMATOR_VARIANCE)}
              [ estimator_rate REAL {N_mdm(Real,multilevEstimatorRate)} ]
             )
            |
            rip_sampling {N_mdm(type,multilevAllocControl_RIP_SAMPLING)}
           ]
          [ discrepancy_emulation {0}
            distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
            |
            recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
           ]
          ( expansion_order_sequence INTEGERLIST {N_mdm(usharray,expansionOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ basis_type {0}
              tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
              |
              total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
              |
              ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
                [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
                [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
               )
             ]
            ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
              [ collocation_points_sequence ALIAS pilot_samples INTEGERLIST {N_mdm(szarray,collocationPointsSeq)} ]
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( expansion_samples_sequence INTEGERLIST {N_mdm(szarray,expansionSamplesSeq)}
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
             )
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          |
          ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
            collocation_points_sequence INTEGERLIST {N_mdm(szarray,collocationPointsSeq)}
            [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
            [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          [ 
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ normalized {N_mdm(true,normalizedCoeffs)} ]
          [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( mf_pce {N_mdm(type,emulatorType_MF_PCE_EMULATOR)}
          [ p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
            uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
            |
            ( dimension_adaptive {0}
              sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
              |
              decay {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_DECAY)}
              |
              generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          [ allocation_control {0}
            greedy {N_mdm(type,multilevAllocControl_GREEDY_REFINEMENT)}
           ]
          [ discrepancy_emulation {0}
            distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
            |
            recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
           ]
          ( quadrature_order_sequence INTEGERLIST {N_mdm(usharray,quadratureOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level_sequence INTEGERLIST {N_mdm(usharray,sparseGridLevelSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( expansion_order_sequence INTEGERLIST {N_mdm(usharray,expansionOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ basis_type {0}
              tensor_product {N_mdm(type,expansionBasisType_TENSOR_PRODUCT_BASIS)}
              |
              total_order {N_mdm(type,expansionBasisType_TOTAL_ORDER_BASIS)}
              |
              ( adapted {N_mdm(type,expansionBasisType_ADAPTED_BASIS_EXPANDING_FRONT)}
                [ advancements INTEGER {N_mdm(ushint,adaptedBasisAdvancements)} ]
                [ soft_convergence_limit INTEGER {N_mdm(ushint,softConvLimit)} ]
               )
             ]
            ( collocation_ratio REAL {N_mdm(Realp,collocationRatio)}
              [ collocation_points_sequence ALIAS pilot_samples INTEGERLIST {N_mdm(szarray,collocationPointsSeq)} ]
              [ 
                ( least_squares {N_mdm(type,regressionType_DEFAULT_LEAST_SQ_REGRESSION)}
                  [ 
                    svd {N_mdm(type,lsRegressionType_SVD_LS)}
                    |
                    equality_constrained {N_mdm(type,lsRegressionType_EQ_CON_LS)}
                   ]
                 )
                |
                ( orthogonal_matching_pursuit ALIAS omp {N_mdm(type,regressionType_ORTHOG_MATCH_PURSUIT)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                basis_pursuit ALIAS bp {N_mdm(type,regressionType_BASIS_PURSUIT)}
                |
                ( basis_pursuit_denoising ALIAS bpdn {N_mdm(type,regressionType_BASIS_PURSUIT_DENOISING)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_angle_regression ALIAS lars {N_mdm(type,regressionType_LEAST_ANGLE_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                 )
                |
                ( least_absolute_shrinkage ALIAS lasso {N_mdm(type,regressionType_LASSO_REGRESSION)}
                  [ noise_tolerance REALLIST {N_mdm(RealDL,regressionNoiseTol)} ]
                  [ l2_penalty REAL {N_mdm(Real,regressionL2Penalty)} ]
                 )
               ]
              [ cross_validation {N_mdm(true,crossValidation)}
                [ noise_only {N_mdm(true,crossValidNoiseOnly)} ]
                [ max_cv_order_candidates INTEGER >= 0 {N_mdm(ushint,maxCVOrderCandidates)} ]
               ]
              [ ratio_order REAL {N_mdm(Realp,collocRatioTermsOrder)} ]
              [ response_scaling {N_mdm(true,respScalingFlag)} ]
              [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
              [ tensor_grid {N_mdm(true,tensorGridFlag)} ]
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
              [ max_solver_iterations INTEGER >= 0 {N_mdm(sizet,maxSolverIterations)} ]
             )
            |
            ( expansion_samples_sequence INTEGERLIST {N_mdm(szarray,expansionSamplesSeq)}
              [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
             )
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          |
          ( orthogonal_least_interpolation ALIAS least_interpolation ALIAS oli {N_mdm(type,regressionType_ORTHOG_LEAST_INTERPOLATION)}
            collocation_points_sequence INTEGERLIST {N_mdm(szarray,collocationPointsSeq)}
            [ tensor_grid INTEGERLIST {N_mdm(usharray,tensorGridOrder)} ]
            [ reuse_points ALIAS reuse_samples {N_mdm(lit,pointReuse_all)} ]
            [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
              [ 
                ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
                  [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
                  [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
                  [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
                 )
                |
                annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
                |
                freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
               ]
              [ active_only {N_mdm(true,importBuildActive)} ]
             ]
           )
          [ 
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ normalized {N_mdm(true,normalizedCoeffs)} ]
          [ export_expansion_file STRING {N_mdm(str,exportExpansionFile)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( sc {N_mdm(type,emulatorType_SC_EMULATOR)}
          [ 
            ( p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
             )
            |
            ( h_refinement {N_mdm(type,refinementType_H_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
              |
              local_adaptive {N_mdm(type,refinementControl_LOCAL_ADAPTIVE_CONTROL)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          ( quadrature_order INTEGER {N_mdm(ushint,quadratureOrder)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level INTEGER {N_mdm(ushint,sparseGridLevel)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nodal {N_mdm(type,expansionBasisType_NODAL_INTERPOLANT)}
              |
              hierarchical {N_mdm(type,expansionBasisType_HIERARCHICAL_INTERPOLANT)}
             ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          [ 
            piecewise {NIDRProblemDescDB::method_piecewise}
            |
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
        |
        ( mf_sc {N_mdm(type,emulatorType_MF_SC_EMULATOR)}
          [ 
            ( p_refinement {N_mdm(type,refinementType_P_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
             )
            |
            ( h_refinement {N_mdm(type,refinementType_H_REFINEMENT)}
              uniform {N_mdm(type,refinementControl_UNIFORM_CONTROL)}
              |
              ( dimension_adaptive {0}
                sobol {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_SOBOL)}
                |
                generalized {N_mdm(type,refinementControl_DIMENSION_ADAPTIVE_CONTROL_GENERALIZED)}
               )
              |
              local_adaptive {N_mdm(type,refinementControl_LOCAL_ADAPTIVE_CONTROL)}
             )
           ]
          [ max_refinement_iterations INTEGER >= 0 {N_mdm(sizet,maxRefineIterations)} ]
          [ allocation_control {0}
            greedy {N_mdm(type,multilevAllocControl_GREEDY_REFINEMENT)}
           ]
          [ discrepancy_emulation {0}
            distinct ALIAS paired {N_mdm(type,multilevDiscrepEmulation_DISTINCT_EMULATION)}
            |
            recursive {N_mdm(type,multilevDiscrepEmulation_RECURSIVE_EMULATION)}
           ]
          ( quadrature_order_sequence INTEGERLIST {N_mdm(usharray,quadratureOrderSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          |
          ( sparse_grid_level_sequence INTEGERLIST {N_mdm(usharray,sparseGridLevelSeq)}
            [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
            [ 
              nodal {N_mdm(type,expansionBasisType_NODAL_INTERPOLANT)}
              |
              hierarchical {N_mdm(type,expansionBasisType_HIERARCHICAL_INTERPOLANT)}
             ]
            [ 
              restricted {N_mdm(type,growthOverride_RESTRICTED)}
              |
              unrestricted {N_mdm(type,growthOverride_UNRESTRICTED)}
             ]
            [ 
              nested {N_mdm(type,nestingOverride_NESTED)}
              |
              non_nested {N_mdm(type,nestingOverride_NON_NESTED)}
             ]
           )
          [ 
            piecewise {NIDRProblemDescDB::method_piecewise}
            |
            askey {N_mdm(type,expansionType_ASKEY_U)}
            |
            wiener {N_mdm(type,expansionType_STD_NORMAL_U)}
           ]
          [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
          [ 
            diagonal_covariance {N_mdm(type,covarianceControl_DIAGONAL_COVARIANCE)}
            |
            full_covariance {N_mdm(type,covarianceControl_FULL_COVARIANCE)}
           ]
         )
       ]
      [ standardized_space {N_mdm(true,standardizedSpace)} ]
      [ export_chain_points_file STRING {N_mdm(str,exportMCMCPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,exportSamplesFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,exportSamplesFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
         ]
       ]
     )
    |
    ( muq {N_mdm(utype,subMethod_SUBMETHOD_MUQ)}
      chain_samples ALIAS samples INTEGER {N_mdm(int,chainSamples)}
      [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
      [ rng {0}
        mt19937 {N_mdm(lit,rngName_mt19937)}
        |
        rnum2 {N_mdm(lit,rngName_rnum2)}
       ]
      [ export_chain_points_file STRING {N_mdm(str,exportMCMCPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,exportSamplesFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,exportSamplesFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,exportSamplesFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,exportSamplesFormat_TABULAR_NONE)}
         ]
       ]
      [ 
        ( adaptive_metropolis {N_mdm(lit,mcmcType_adaptive_metropolis)}
          [ period_num_steps INTEGER {N_mdm(int,amPeriodNumSteps)} ]
          [ starting_step INTEGER {N_mdm(int,amStartingStep)} ]
          [ adapt_scale REAL {N_mdm(Real,amScale)} ]
         )
        |
        ( delayed_rejection {N_mdm(lit,mcmcType_delayed_rejection)}
          [ num_stages INTEGER {N_mdm(int,drNumStages)} ]
          [ scale_type STRING {N_mdm(str,drScaleType)} ]
          [ delay_scale REAL {N_mdm(Real,drScale)} ]
         )
        |
        ( dili {N_mdm(lit,mcmcType_dili)}
          [ hessian_type STRING {N_mdm(str,diliHessianType)} ]
          [ adapt_interval INTEGER {N_mdm(int,diliAdaptInterval)} ]
          [ adapt_start INTEGER {N_mdm(int,diliAdaptStart)} ]
          [ adapt_end INTEGER {N_mdm(int,diliAdaptEnd)} ]
          [ initial_weight INTEGER {N_mdm(int,diliInitialWeight)} ]
          [ hess_tolerance REAL {N_mdm(Real,diliHessTolerance)} ]
          [ lis_tolerance REAL {N_mdm(Real,diliLISTolerance)} ]
          [ ses_num_eigs INTEGER {N_mdm(int,diliSesNumEigs)} ]
          [ ses_rel_tol REAL {N_mdm(Real,diliSesRelTol)} ]
          [ ses_abs_tol REAL {N_mdm(Real,diliSesAbsTol)} ]
          [ ses_exp_rank INTEGER {N_mdm(int,diliSesExpRank)} ]
          [ ses_overs_factor INTEGER {N_mdm(int,diliSesOversFactor)} ]
          [ ses_block_size INTEGER {N_mdm(int,diliSesBlockSize)} ]
         )
        |
        ( dram {N_mdm(lit,mcmcType_dram)}
          [ num_stages INTEGER {N_mdm(int,drNumStages)} ]
          [ scale_type STRING {N_mdm(str,drScaleType)} ]
          [ delay_scale REAL {N_mdm(Real,drScale)} ]
          [ period_num_steps INTEGER {N_mdm(int,amPeriodNumSteps)} ]
          [ starting_step INTEGER {N_mdm(int,amStartingStep)} ]
          [ adapt_scale REAL {N_mdm(Real,amScale)} ]
         )
        |
        ( mala {N_mdm(lit,mcmcType_mala)}
          [ step_size REAL {N_mdm(Real,malaStepSize)} ]
         )
        |
        metropolis_hastings {N_mdm(lit,mcmcType_metropolis_hastings)}
       ]
      [ pre_solve {0}
        sqp {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL)}
        |
        nip {N_mdm(utype,optSubProbSolver_SUBMETHOD_OPTPP)}
        |
        none {N_mdm(utype,optSubProbSolver_SUBMETHOD_NONE)}
       ]
      [ proposal_covariance {N_mdm(lit,proposalCovType_user)}
        ( prior {N_mdm(lit,proposalCovType_prior)}
          [ multiplier REAL > 0.0 {N_mdm(Real,priorPropCovMult)} ]
         )
        |
        ( derivatives {N_mdm(lit,proposalCovType_derivatives)}
          [ update_period INTEGER {N_mdm(int,proposalCovUpdatePeriod)} ]
         )
        |
        ( values REALLIST {N_mdm(RealDL,proposalCovData)}
          diagonal {N_mdm(lit,proposalCovInputType_diagonal)}
          |
          matrix {N_mdm(lit,proposalCovInputType_matrix)}
         )
        |
        ( filename STRING {N_mdm(str,proposalCovFile)}
          diagonal {N_mdm(lit,proposalCovInputType_diagonal)}
          |
          matrix {N_mdm(lit,proposalCovInputType_matrix)}
         )
       ]
     )
    [ experimental_design {N_mdm(true,adaptExpDesign)}
      initial_samples ALIAS samples INTEGER {N_mdm(int,numSamples)}
      num_candidates INTEGER > 0 {N_mdm(sizet,numCandidates)}
      [ max_hifi_evaluations INTEGER >= 0 {N_mdm(int,maxHifiEvals)} ]
      [ batch_size INTEGER >= 1 {N_mdm(int,batchSize)} ]
      [ import_candidate_points_file STRING {N_mdm(str,importCandPtsFile)}
        [ 
          ( custom_annotated {N_mdm(utype,importCandFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,importCandFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,importCandFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,importCandFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,importCandFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,importCandFormat_TABULAR_NONE)}
         ]
       ]
      [ ksg2 {N_mdm(true,mutualInfoKSG2)} ]
     ]
    [ calibrate_error_multipliers {0}
      one {N_mdm(utype,calibrateErrorMode_CALIBRATE_ONE)}
      |
      per_experiment {N_mdm(utype,calibrateErrorMode_CALIBRATE_PER_EXPER)}
      |
      per_response {N_mdm(utype,calibrateErrorMode_CALIBRATE_PER_RESP)}
      |
      both {N_mdm(utype,calibrateErrorMode_CALIBRATE_BOTH)}
      [ 
        hyperprior_alphas REALLIST {N_mdm(RealDL,hyperPriorAlphas)}
        hyperprior_betas REALLIST {N_mdm(RealDL,hyperPriorBetas)}
       ]
     ]
    [ burn_in_samples INTEGER {N_mdm(int,burnInSamples)} ]
    [ posterior_stats {0}
      [ kl_divergence {N_mdm(true,posteriorStatsKL)} ]
      [ mutual_info {N_mdm(true,posteriorStatsMutual)}
        [ ksg2 {N_mdm(true,mutualInfoKSG2)} ]
       ]
      [ kde {N_mdm(true,posteriorStatsKDE)} ]
     ]
    [ chain_diagnostics {N_mdm(true,chainDiagnostics)}
      [ confidence_intervals {N_mdm(true,chainDiagnosticsCI)} ]
     ]
    [ model_evidence {N_mdm(true,modelEvidence)}
      [ mc_approx {N_mdm(true,modelEvidMC)} ]
      [ evidence_samples INTEGER {N_mdm(int,evidenceSamples)} ]
      [ laplace_approx {N_mdm(true,modelEvidLaplace)} ]
     ]
    [ model_discrepancy {N_mdm(true,calModelDiscrepancy)}
      [ discrepancy_type {0}
        ( gaussian_process ALIAS kriging {N_mdm(lit,modelDiscrepancyType_global_kriging)}
          [ trend_order INTEGER >= 0 {N_mdm(shint,polynomialOrder)} ]
         )
        |
        ( polynomial {N_mdm(lit,modelDiscrepancyType_global_polynomial)}
          [ basis_order INTEGER >= 0 {N_mdm(shint,polynomialOrder)} ]
         )
       ]
      [ num_prediction_configs INTEGER >= 0 {N_mdm(sizet,numPredConfigs)} ]
      [ prediction_configs REALLIST {N_mdm(RealDL,predictionConfigList)} ]
      [ import_prediction_configs STRING {N_mdm(str,importPredConfigs)}
        [ 
          ( custom_annotated {N_mdm(utype,importPredConfigFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,importPredConfigFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,importPredConfigFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,importPredConfigFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,importPredConfigFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,importPredConfigFormat_TABULAR_NONE)}
         ]
       ]
      [ export_discrepancy_file STRING {N_mdm(str,exportDiscrepFile)}
        [ 
          ( custom_annotated {N_mdm(utype,exportDiscrepFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,exportDiscrepFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,exportDiscrepFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,exportDiscrepFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,exportDiscrepFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,exportDiscrepFormat_TABULAR_NONE)}
         ]
       ]
      [ export_corrected_model_file STRING {N_mdm(str,exportCorrModelFile)}
        [ 
          ( custom_annotated {N_mdm(utype,exportCorrModelFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,exportCorrModelFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,exportCorrModelFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,exportCorrModelFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,exportCorrModelFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,exportCorrModelFormat_TABULAR_NONE)}
         ]
       ]
      [ export_corrected_variance_file STRING {N_mdm(str,exportCorrVarFile)}
        [ 
          ( custom_annotated {N_mdm(utype,exportCorrVarFormat_TABULAR_NONE)}
            [ header {N_mdm(augment_utype,exportCorrVarFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mdm(augment_utype,exportCorrVarFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mdm(augment_utype,exportCorrVarFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mdm(utype,exportCorrVarFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mdm(utype,exportCorrVarFormat_TABULAR_NONE)}
         ]
       ]
     ]
    [ sub_sampling_period INTEGER {N_mdm(int,subSamplingPeriod)} ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
    [ scaling {N_mdm(true,methodScaling)} ]
   )
  |
  ( dace {N_mdm(utype,methodName_DACE)}
    grid {N_mdm(utype,subMethod_SUBMETHOD_GRID)}
    |
    random {N_mdm(utype,subMethod_SUBMETHOD_RANDOM)}
    |
    oas {N_mdm(utype,subMethod_SUBMETHOD_OAS)}
    |
    lhs {N_mdm(utype,subMethod_SUBMETHOD_LHS)}
    |
    oa_lhs {N_mdm(utype,subMethod_SUBMETHOD_OA_LHS)}
    |
    box_behnken {N_mdm(utype,subMethod_SUBMETHOD_BOX_BEHNKEN)}
    |
    central_composite {N_mdm(utype,subMethod_SUBMETHOD_CENTRAL_COMPOSITE)}
    [ samples INTEGER {N_mdm(int,numSamples)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ main_effects {N_mdm(true,mainEffectsFlag)} ]
    [ quality_metrics {N_mdm(true,volQualityFlag)} ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
      [ vbd_sampling_method {N_mdm(utype,vbdViaSamplingMethod)}
        ( binned {N_mdm(utype,vbdViaSamplingMethod_VBD_BINNED)}
          [ num_bins INTEGER {N_mdm(int,vbdViaSamplingNumBins)} ]
         )
        |
        pick_and_freeze {N_mdm(utype,vbdViaSamplingMethod_VBD_PICK_AND_FREEZE)}
       ]
     ]
    [ symbols INTEGER {N_mdm(int,numSymbols)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( fsu_cvt {N_mdm(utype,methodName_FSU_CVT)}
    [ samples INTEGER {N_mdm(int,numSamples)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ fixed_seed {N_mdm(true,fixedSeedFlag)} ]
    [ latinize {N_mdm(true,latinizeFlag)} ]
    [ quality_metrics {N_mdm(true,volQualityFlag)} ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
      [ vbd_sampling_method {N_mdm(utype,vbdViaSamplingMethod)}
        ( binned {N_mdm(utype,vbdViaSamplingMethod_VBD_BINNED)}
          [ num_bins INTEGER {N_mdm(int,vbdViaSamplingNumBins)} ]
         )
        |
        pick_and_freeze {N_mdm(utype,vbdViaSamplingMethod_VBD_PICK_AND_FREEZE)}
       ]
     ]
    [ trial_type {0}
      grid {N_mdm(lit,trialType_grid)}
      |
      halton {N_mdm(lit,trialType_halton)}
      |
      random {N_mdm(lit,trialType_random)}
     ]
    [ num_trials INTEGER {N_mdm(int,numTrials)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( psuade_moat {N_mdm(utype,methodName_PSUADE_MOAT)}
    [ partitions INTEGERLIST {N_mdm(usharray,varPartitions)} ]
    [ samples INTEGER {N_mdm(int,numSamples)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( local_evidence ALIAS nond_local_evidence {N_mdm(utype,methodName_LOCAL_EVIDENCE)}
    [ 
      sqp {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL)}
      |
      nip {N_mdm(utype,optSubProbSolver_SUBMETHOD_OPTPP)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( local_interval_est ALIAS nond_local_interval_est {N_mdm(utype,methodName_LOCAL_INTERVAL_EST)}
    [ 
      sqp {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL)}
      |
      nip {N_mdm(utype,optSubProbSolver_SUBMETHOD_OPTPP)}
     ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( local_reliability ALIAS nond_local_reliability {N_mdm(utype,methodName_LOCAL_RELIABILITY)}
    [ mpp_search {0}
      x_taylor_mean {N_mdm(utype,subMethod_SUBMETHOD_AMV_X)}
      |
      u_taylor_mean {N_mdm(utype,subMethod_SUBMETHOD_AMV_U)}
      |
      x_taylor_mpp {N_mdm(utype,subMethod_SUBMETHOD_AMV_PLUS_X)}
      |
      u_taylor_mpp {N_mdm(utype,subMethod_SUBMETHOD_AMV_PLUS_U)}
      |
      x_two_point {N_mdm(utype,subMethod_SUBMETHOD_TANA_X)}
      |
      u_two_point {N_mdm(utype,subMethod_SUBMETHOD_TANA_U)}
      |
      x_multi_point {N_mdm(utype,subMethod_SUBMETHOD_QMEA_X)}
      |
      u_multi_point {N_mdm(utype,subMethod_SUBMETHOD_QMEA_U)}
      |
      no_approx {N_mdm(utype,subMethod_SUBMETHOD_NO_APPROX)}
      [ 
        sqp {N_mdm(utype,optSubProbSolver_SUBMETHOD_NPSOL)}
        |
        nip {N_mdm(utype,optSubProbSolver_SUBMETHOD_OPTPP)}
       ]
      [ integration {0}
        first_order {N_mdm(lit,reliabilityIntegration_first_order)}
        |
        second_order {N_mdm(lit,reliabilityIntegration_second_order)}
        [ probability_refinement ALIAS sample_refinement {0}
          import {N_mdm(utype,integrationRefine_IS)}
          |
          adapt_import {N_mdm(utype,integrationRefine_AIS)}
          |
          mm_adapt_import {N_mdm(utype,integrationRefine_MMAIS)}
          [ refinement_samples INTEGERLIST {N_mdm(ivec,refineSamples)} ]
          [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
         ]
       ]
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        reliabilities {N_mdm(type,responseLevelTarget_RELIABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ reliability_levels REALLIST {N_mdm(resplevs,reliabilityLevels)}
      [ num_reliability_levels INTEGERLIST {N_mdm(num_resplevs,reliabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ final_moments {0}
      none {N_mdm(type,finalMomentsType_NO_MOMENTS)}
      |
      standard {N_mdm(type,finalMomentsType_STANDARD_MOMENTS)}
      |
      central {N_mdm(type,finalMomentsType_CENTRAL_MOMENTS)}
     ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( global_reliability ALIAS nond_global_reliability {N_mdm(utype,methodName_GLOBAL_RELIABILITY)}
    [ initial_samples INTEGER {N_mdm(int,numSamples)} ]
    x_gaussian_process ALIAS x_kriging {N_mdm(utype,subMethod_SUBMETHOD_EGRA_X)}
    |
    u_gaussian_process ALIAS u_kriging {N_mdm(utype,subMethod_SUBMETHOD_EGRA_U)}
    [ 
      ( surfpack {N_mdm(type,emulatorType_KRIGING_EMULATOR)}
        [ export_model {N_mdm(true,exportSurrogate)}
          [ filename_prefix STRING {N_mdm(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mdm(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mdm(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
           )
         ]
       )
      |
      dakota {N_mdm(type,emulatorType_GP_EMULATOR)}
      |
      ( experimental {N_mdm(type,emulatorType_EXPGP_EMULATOR)}
        [ export_model {N_mdm(true,exportSurrogate)}
          [ filename_prefix STRING {N_mdm(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mdm(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mdm(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
           )
         ]
        [ options_file STRING {N_mdm(str,advancedOptionsFilename)} ]
       )
     ]
    [ import_build_points_file ALIAS import_points_file STRING {N_mdm(str,importBuildPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,importBuildFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,importBuildFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,importBuildFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,importBuildActive)} ]
     ]
    [ export_approx_points_file ALIAS export_points_file STRING {N_mdm(str,exportApproxPtsFile)}
      [ 
        ( custom_annotated {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,exportApproxFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,exportApproxFormat_TABULAR_NONE)}
       ]
     ]
    [ use_derivatives {N_mdm(true,methodUseDerivsFlag)} ]
    [ seed INTEGER > 0 {N_mdm(int,randomSeed)} ]
    [ rng {0}
      mt19937 {N_mdm(lit,rngName_mt19937)}
      |
      rnum2 {N_mdm(lit,rngName_rnum2)}
     ]
    [ response_levels REALLIST {N_mdm(resplevs,responseLevels)}
      [ num_response_levels INTEGERLIST {N_mdm(num_resplevs,responseLevels)} ]
      [ compute {0}
        probabilities {N_mdm(type,responseLevelTarget_PROBABILITIES)}
        |
        gen_reliabilities {N_mdm(type,responseLevelTarget_GEN_RELIABILITIES)}
        [ system {0}
          series {N_mdm(type,responseLevelTargetReduce_SYSTEM_SERIES)}
          |
          parallel {N_mdm(type,responseLevelTargetReduce_SYSTEM_PARALLEL)}
         ]
       ]
     ]
    [ probability_levels REALLIST {N_mdm(resplevs01,probabilityLevels)}
      [ num_probability_levels INTEGERLIST {N_mdm(num_resplevs,probabilityLevels)} ]
     ]
    [ gen_reliability_levels REALLIST {N_mdm(resplevs,genReliabilityLevels)}
      [ num_gen_reliability_levels INTEGERLIST {N_mdm(num_resplevs,genReliabilityLevels)} ]
     ]
    [ distribution {0}
      cumulative {N_mdm(type,distributionType_CUMULATIVE)}
      |
      complementary {N_mdm(type,distributionType_COMPLEMENTARY)}
     ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( fsu_quasi_mc {0}
    halton {N_mdm(utype,methodName_FSU_HALTON)}
    |
    hammersley {N_mdm(utype,methodName_FSU_HAMMERSLEY)}
    [ latinize {N_mdm(true,latinizeFlag)} ]
    [ quality_metrics {N_mdm(true,volQualityFlag)} ]
    [ variance_based_decomp {N_mdm(true,vbdFlag)}
      [ drop_tolerance REAL {N_mdm(Real,vbdDropTolerance)} ]
      [ vbd_sampling_method {N_mdm(utype,vbdViaSamplingMethod)}
        ( binned {N_mdm(utype,vbdViaSamplingMethod_VBD_BINNED)}
          [ num_bins INTEGER {N_mdm(int,vbdViaSamplingNumBins)} ]
         )
        |
        pick_and_freeze {N_mdm(utype,vbdViaSamplingMethod_VBD_PICK_AND_FREEZE)}
       ]
     ]
    [ samples INTEGER {N_mdm(int,numSamples)} ]
    [ fixed_sequence {N_mdm(true,fixedSequenceFlag)} ]
    [ sequence_start INTEGERLIST {N_mdm(ivec,sequenceStart)} ]
    [ sequence_leap INTEGERLIST {N_mdm(ivec,sequenceLeap)} ]
    [ prime_base INTEGERLIST {N_mdm(ivec,primeBase)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( vector_parameter_study {N_mdm(utype,methodName_VECTOR_PARAMETER_STUDY)}
    final_point REALLIST {N_mdm(RealDL,finalPoint)}
    |
    step_vector REALLIST {N_mdm(RealDL,stepVector)}
    num_steps INTEGER {N_mdm(int,numSteps)}
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( list_parameter_study {N_mdm(utype,methodName_LIST_PARAMETER_STUDY)}
    list_of_points REALLIST {N_mdm(RealDL,listOfPoints)}
    |
    ( import_points_file STRING {N_mdm(str,pstudyFilename)}
      [ 
        ( custom_annotated {N_mdm(utype,pstudyFileFormat_TABULAR_NONE)}
          [ header {N_mdm(augment_utype,pstudyFileFormat_TABULAR_HEADER)} ]
          [ eval_id {N_mdm(augment_utype,pstudyFileFormat_TABULAR_EVAL_ID)} ]
          [ interface_id {N_mdm(augment_utype,pstudyFileFormat_TABULAR_IFACE_ID)} ]
         )
        |
        annotated {N_mdm(utype,pstudyFileFormat_TABULAR_ANNOTATED)}
        |
        freeform {N_mdm(utype,pstudyFileFormat_TABULAR_NONE)}
       ]
      [ active_only {N_mdm(true,pstudyFileActive)} ]
     )
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( centered_parameter_study {N_mdm(utype,methodName_CENTERED_PARAMETER_STUDY)}
    step_vector REALLIST {N_mdm(RealDL,stepVector)}
    steps_per_variable ALIAS deltas_per_variable INTEGERLIST {N_mdm(ivec,stepsPerVariable)}
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( multidim_parameter_study {N_mdm(utype,methodName_MULTIDIM_PARAMETER_STUDY)}
    partitions INTEGERLIST {N_mdm(usharray,varPartitions)}
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )
  |
  ( richardson_extrap {N_mdm(utype,methodName_RICHARDSON_EXTRAP)}
    estimate_order {N_mdm(utype,subMethod_SUBMETHOD_ESTIMATE_ORDER)}
    |
    converge_order {N_mdm(utype,subMethod_SUBMETHOD_CONVERGE_ORDER)}
    |
    converge_qoi {N_mdm(utype,subMethod_SUBMETHOD_CONVERGE_QOI)}
    [ refinement_rate REAL {N_mdm(Real,refinementRate)} ]
    [ convergence_tolerance REAL {N_mdm(Real,convergenceTolerance)} ]
    [ max_iterations INTEGER >= 0 {N_mdm(sizet,maxIterations)} ]
    [ model_pointer STRING {N_mdm(str,modelPointer)} ]
   )

KEYWORD model {N_mom3(start,0,stop)}
  [ id_model STRING {N_mom(str,idModel)} ]
  ( single ALIAS simulation {N_mom(lit,modelType_simulation)}
    [ interface_pointer STRING {N_mom(str,interfacePointer)} ]
    [ solution_level_control STRING {N_mom(str,solutionLevelControl)} ]
    [ 
      solution_level_cost REALLIST {N_mom(RealDL,solutionLevelCost)}
      |
      cost_recovery_metadata STRING {N_mom(str,costRecoveryMetadata)}
     ]
   )
  |
  ( surrogate {N_mom(lit,modelType_surrogate)}
    [ id_surrogates INTEGERLIST {N_mom(id_to_index_set,surrogateFnIndices)} ]
    ( global {0}
      ( experimental_gaussian_process {N_mom(lit,surrogateType_global_exp_gauss_proc)}
        [ trend {0}
          none {N_mom(lit,trendOrder_none)}
          |
          constant {N_mom(lit,trendOrder_constant)}
          |
          linear {N_mom(lit,trendOrder_linear)}
          |
          reduced_quadratic {N_mom(lit,trendOrder_reduced_quadratic)}
          |
          quadratic {N_mom(lit,trendOrder_quadratic)}
         ]
        [ num_restarts INTEGER > 1 {N_mom(int,numRestarts)} ]
        [ 
          nugget REAL > 0 {N_mom(Real,krigingNugget)}
          |
          find_nugget INTEGER {N_mom(shint,krigingFindNugget)}
         ]
        [ options_file STRING {N_mom(str,advancedOptionsFilename)} ]
        [ export_approx_variance_file STRING {N_mom(str,exportApproxVarianceFile)}
          [ 
            ( custom_annotated {N_mom(utype,exportApproxVarianceFormat_TABULAR_NONE)}
              [ header {N_mom(augment_utype,exportApproxVarianceFormat_TABULAR_HEADER)} ]
              [ eval_id {N_mom(augment_utype,exportApproxVarianceFormat_TABULAR_EVAL_ID)} ]
              [ interface_id {N_mom(augment_utype,exportApproxVarianceFormat_TABULAR_IFACE_ID)} ]
             )
            |
            annotated {N_mom(utype,exportApproxVarianceFormat_TABULAR_ANNOTATED)}
            |
            freeform {N_mom(utype,exportApproxVarianceFormat_TABULAR_NONE)}
           ]
         ]
        [ export_model {N_mom(true,exportSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mom(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mom(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
           )
         ]
        [ import_model {N_mom(true,importSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelImportPrefix)} ]
          text_archive {N_mom(augment_utype,modelImportFormat_TEXT_ARCHIVE)}
          |
          binary_archive {N_mom(augment_utype,modelImportFormat_BINARY_ARCHIVE)}
         ]
       )
      |
      ( gaussian_process ALIAS kriging {0}
        ( dakota {N_mom(lit,surrogateType_global_gaussian)}
          [ point_selection {N_mom(true,pointSelection)} ]
          [ trend {0}
            constant {N_mom(lit,trendOrder_constant)}
            |
            linear {N_mom(lit,trendOrder_linear)}
            |
            reduced_quadratic {N_mom(lit,trendOrder_reduced_quadratic)}
           ]
         )
        |
        ( surfpack {N_mom(lit,surrogateType_global_kriging)}
          [ trend {0}
            constant {N_mom(lit,trendOrder_constant)}
            |
            linear {N_mom(lit,trendOrder_linear)}
            |
            reduced_quadratic {N_mom(lit,trendOrder_reduced_quadratic)}
            |
            quadratic {N_mom(lit,trendOrder_quadratic)}
           ]
          [ optimization_method STRING {N_mom(str,krigingOptMethod)} ]
          [ max_trials INTEGER > 0 {N_mom(shint,krigingMaxTrials)} ]
          [ 
            nugget REAL > 0 {N_mom(Real,krigingNugget)}
            |
            find_nugget INTEGER {N_mom(shint,krigingFindNugget)}
           ]
          [ correlation_lengths REALLIST {N_mom(RealDL,krigingCorrelations)} ]
          [ export_model {N_mom(true,exportSurrogate)}
            [ filename_prefix STRING {N_mom(str,modelExportPrefix)} ]
            ( formats {0}
              [ text_archive {N_mom(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
              [ binary_archive {N_mom(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
              [ algebraic_file {N_mom(augment_utype,modelExportFormat_ALGEBRAIC_FILE)} ]
              [ algebraic_console {N_mom(augment_utype,modelExportFormat_ALGEBRAIC_CONSOLE)} ]
             )
           ]
          [ import_model {N_mom(true,importSurrogate)}
            [ filename_prefix STRING {N_mom(str,modelImportPrefix)} ]
            text_archive {N_mom(augment_utype,modelImportFormat_TEXT_ARCHIVE)}
            |
            binary_archive {N_mom(augment_utype,modelImportFormat_BINARY_ARCHIVE)}
           ]
         )
        [ export_approx_variance_file STRING {N_mom(str,exportApproxVarianceFile)}
          [ 
            ( custom_annotated {N_mom(utype,exportApproxVarianceFormat_TABULAR_NONE)}
              [ header {N_mom(augment_utype,exportApproxVarianceFormat_TABULAR_HEADER)} ]
              [ eval_id {N_mom(augment_utype,exportApproxVarianceFormat_TABULAR_EVAL_ID)} ]
              [ interface_id {N_mom(augment_utype,exportApproxVarianceFormat_TABULAR_IFACE_ID)} ]
             )
            |
            annotated {N_mom(utype,exportApproxVarianceFormat_TABULAR_ANNOTATED)}
            |
            freeform {N_mom(utype,exportApproxVarianceFormat_TABULAR_NONE)}
           ]
         ]
       )
      |
      ( mars {N_mom(lit,surrogateType_global_mars)}
        [ max_bases INTEGER {N_mom(shint,marsMaxBases)} ]
        [ interpolation {0}
          linear {N_mom(lit,marsInterpolation_linear)}
          |
          cubic {N_mom(lit,marsInterpolation_cubic)}
         ]
        [ export_model {N_mom(true,exportSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mom(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mom(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
           )
         ]
        [ import_model {N_mom(true,importSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelImportPrefix)} ]
          text_archive {N_mom(augment_utype,modelImportFormat_TEXT_ARCHIVE)}
          |
          binary_archive {N_mom(augment_utype,modelImportFormat_BINARY_ARCHIVE)}
         ]
       )
      |
      ( moving_least_squares {N_mom(lit,surrogateType_global_moving_least_squares)}
        [ basis_order ALIAS poly_order INTEGER >= 0 {N_mom(shint,polynomialOrder)} ]
        [ weight_function INTEGER {N_mom(shint,mlsWeightFunction)} ]
        [ export_model {N_mom(true,exportSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mom(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mom(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
           )
         ]
        [ import_model {N_mom(true,importSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelImportPrefix)} ]
          text_archive {N_mom(augment_utype,modelImportFormat_TEXT_ARCHIVE)}
          |
          binary_archive {N_mom(augment_utype,modelImportFormat_BINARY_ARCHIVE)}
         ]
       )
      |
      ( function_train {N_mom(lit,surrogateType_global_function_train)}
        [ regression_type {0}
          ls {N_mom(type,regressionType_FT_LS)}
          |
          ( rls2 {N_mom(type,regressionType_FT_RLS2)}
            l2_penalty REAL {N_mom(Real,regressionL2Penalty)}
           )
         ]
        [ max_solver_iterations INTEGER >= 0 {N_mom(sizet,maxSolverIterations)} ]
        [ max_cross_iterations INTEGER >= 0 {N_mom(int,maxCrossIterations)} ]
        [ solver_tolerance REAL {N_mom(Real,solverTol)} ]
        [ response_scaling {N_mom(true,respScalingFlag)} ]
        [ tensor_grid {N_mom(true,tensorGridFlag)} ]
        [ rounding_tolerance REAL {N_mom(Real,solverRoundingTol)} ]
        [ arithmetic_tolerance REAL {N_mom(Real,statsRoundingTol)} ]
        [ start_order ALIAS order INTEGER >= 0 {N_mom(ushint,startOrder)}
          [ dimension_preference REALLIST {N_mdm(RealDL,anisoDimPref)} ]
         ]
        [ adapt_order {N_mom(true,adaptOrder)} ]
        [ kick_order INTEGER > 0 {N_mom(ushint,kickOrder)} ]
        [ max_order INTEGER >= 0 {N_mom(ushint,maxOrder)} ]
        [ max_cv_order_candidates INTEGER >= 0 {N_mom(ushint,maxCVOrderCandidates)} ]
        [ start_rank ALIAS rank INTEGER >= 0 {N_mom(sizet,startRank)} ]
        [ adapt_rank {N_mom(true,adaptRank)} ]
        [ kick_rank INTEGER > 0 {N_mom(sizet,kickRank)} ]
        [ max_rank INTEGER >= 0 {N_mom(sizet,maxRank)} ]
        [ max_cv_rank_candidates INTEGER >= 0 {N_mom(sizet,maxCVRankCandidates)} ]
       )
      |
      ( neural_network {N_mom(lit,surrogateType_global_neural_network)}
        [ max_nodes ALIAS nodes INTEGER {N_mom(shint,annNodes)} ]
        [ range REAL {N_mom(Real,annRange)} ]
        [ random_weight INTEGER {N_mom(shint,annRandomWeight)} ]
        [ export_model {N_mom(true,exportSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mom(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mom(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
            [ algebraic_file {N_mom(augment_utype,modelExportFormat_ALGEBRAIC_FILE)} ]
            [ algebraic_console {N_mom(augment_utype,modelExportFormat_ALGEBRAIC_CONSOLE)} ]
           )
         ]
        [ import_model {N_mom(true,importSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelImportPrefix)} ]
          text_archive {N_mom(augment_utype,modelImportFormat_TEXT_ARCHIVE)}
          |
          binary_archive {N_mom(augment_utype,modelImportFormat_BINARY_ARCHIVE)}
         ]
       )
      |
      ( radial_basis {N_mom(lit,surrogateType_global_radial_basis)}
        [ bases INTEGER {N_mom(shint,rbfBases)} ]
        [ max_pts INTEGER {N_mom(shint,rbfMaxPts)} ]
        [ min_partition INTEGER {N_mom(shint,rbfMinPartition)} ]
        [ max_subsets INTEGER {N_mom(shint,rbfMaxSubsets)} ]
        [ export_model {N_mom(true,exportSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mom(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mom(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
            [ algebraic_file {N_mom(augment_utype,modelExportFormat_ALGEBRAIC_FILE)} ]
            [ algebraic_console {N_mom(augment_utype,modelExportFormat_ALGEBRAIC_CONSOLE)} ]
           )
         ]
        [ import_model {N_mom(true,importSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelImportPrefix)} ]
          text_archive {N_mom(augment_utype,modelImportFormat_TEXT_ARCHIVE)}
          |
          binary_archive {N_mom(augment_utype,modelImportFormat_BINARY_ARCHIVE)}
         ]
       )
      |
      ( polynomial {N_mom(lit,surrogateType_global_polynomial)}
        basis_order INTEGER >= 0 {N_mom(shint,polynomialOrder)}
        |
        linear {N_mom(order,polynomialOrder_1)}
        |
        quadratic {N_mom(order,polynomialOrder_2)}
        |
        cubic {N_mom(order,polynomialOrder_3)}
        [ export_model {N_mom(true,exportSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mom(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mom(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
            [ algebraic_file {N_mom(augment_utype,modelExportFormat_ALGEBRAIC_FILE)} ]
            [ algebraic_console {N_mom(augment_utype,modelExportFormat_ALGEBRAIC_CONSOLE)} ]
           )
         ]
        [ import_model {N_mom(true,importSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelImportPrefix)} ]
          text_archive {N_mom(augment_utype,modelImportFormat_TEXT_ARCHIVE)}
          |
          binary_archive {N_mom(augment_utype,modelImportFormat_BINARY_ARCHIVE)}
         ]
       )
      |
      ( experimental_polynomial {N_mom(lit,surrogateType_global_exp_poly)}
        basis_order INTEGER >= 0 {N_mom(shint,polynomialOrder)}
        [ options_file STRING {N_mom(str,advancedOptionsFilename)} ]
        [ export_model {N_mom(true,exportSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mom(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mom(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
           )
         ]
        [ import_model {N_mom(true,importSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelImportPrefix)} ]
          text_archive {N_mom(augment_utype,modelImportFormat_TEXT_ARCHIVE)}
          |
          binary_archive {N_mom(augment_utype,modelImportFormat_BINARY_ARCHIVE)}
         ]
       )
      |
      ( experimental_python {N_mom(lit,surrogateType_global_exp_python)}
        [ options_file STRING {N_mom(str,advancedOptionsFilename)} ]
        class_path_and_name STRING {N_mom(str,moduleAndClassName)}
        [ export_model {N_mom(true,exportSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelExportPrefix)} ]
          ( formats {0}
            [ text_archive {N_mom(augment_utype,modelExportFormat_TEXT_ARCHIVE)} ]
            [ binary_archive {N_mom(augment_utype,modelExportFormat_BINARY_ARCHIVE)} ]
           )
         ]
        [ import_model {N_mom(true,importSurrogate)}
          [ filename_prefix STRING {N_mom(str,modelImportPrefix)} ]
          text_archive {N_mom(augment_utype,modelImportFormat_TEXT_ARCHIVE)}
          |
          binary_archive {N_mom(augment_utype,modelImportFormat_BINARY_ARCHIVE)}
         ]
       )
      [ domain_decomposition {N_mom(true,domainDecomp)}
        [ cell_type STRING {N_mom(str,decompCellType)} ]
        [ support_layers INTEGER {N_mom(int,decompSupportLayers)} ]
        [ discontinuity_detection {N_mom(true,decompDiscontDetect)}
          jump_threshold REAL {N_mom(Real,discontJumpThresh)}
          |
          gradient_threshold REAL {N_mom(Real,discontGradThresh)}
         ]
       ]
      [ 
        total_points INTEGER {N_mom(int,pointsTotal)}
        |
        minimum_points {N_mom(type,pointsManagement_MINIMUM_POINTS)}
        |
        recommended_points {N_mom(type,pointsManagement_RECOMMENDED_POINTS)}
       ]
      [ 
        ( dace_method_pointer STRING {N_mom(str,subMethodPointer)}
          [ auto_refinement {N_mom(true,autoRefine)}
            [ max_iterations INTEGER > 0 {N_mom(sizet,maxIterations)} ]
            [ max_function_evaluations INTEGER > 0 {N_mom(sizet,maxFunctionEvals)} ]
            [ convergence_tolerance REAL {N_mom(Real,convergenceTolerance)} ]
            [ soft_convergence_limit INTEGER >= 0 {N_mom(int,softConvergenceLimit)} ]
            [ cross_validation_metric STRING {N_mom(str,refineCVMetric)}
              [ folds INTEGER > 0 {N_mom(int,refineCVFolds)} ]
             ]
           ]
         )
        |
        truth_model_pointer ALIAS actual_model_pointer STRING {N_mom(str,truthModelPointer)}
       ]
      [ reuse_points ALIAS reuse_samples {0}
        all {N_mom(lit,approxPointReuse_all)}
        |
        region {N_mom(lit,approxPointReuse_region)}
        |
        none {N_mom(lit,approxPointReuse_none)}
       ]
      [ import_build_points_file ALIAS import_points_file ALIAS samples_file STRING {N_mom(str,importBuildPtsFile)}
        [ 
          ( custom_annotated {N_mom(utype,importBuildFormat_TABULAR_NONE)}
            [ header {N_mom(augment_utype,importBuildFormat_TABULAR_HEADER)}
              [ use_variable_labels {N_mom(true,importUseVariableLabels)} ]
             ]
            [ eval_id {N_mom(augment_utype,importBuildFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mom(augment_utype,importBuildFormat_TABULAR_IFACE_ID)} ]
           )
          |
          ( annotated {N_mom(utype,importBuildFormat_TABULAR_ANNOTATED)}
            [ use_variable_labels {N_mom(true,importUseVariableLabels)} ]
           )
          |
          freeform {N_mom(utype,importBuildFormat_TABULAR_NONE)}
         ]
        [ active_only {N_mom(true,importBuildActive)} ]
       ]
      [ export_approx_points_file ALIAS export_points_file STRING {N_mom(str,exportApproxPtsFile)}
        [ 
          ( custom_annotated {N_mom(utype,exportApproxFormat_TABULAR_NONE)}
            [ header {N_mom(augment_utype,exportApproxFormat_TABULAR_HEADER)} ]
            [ eval_id {N_mom(augment_utype,exportApproxFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mom(augment_utype,exportApproxFormat_TABULAR_IFACE_ID)} ]
           )
          |
          annotated {N_mom(utype,exportApproxFormat_TABULAR_ANNOTATED)}
          |
          freeform {N_mom(utype,exportApproxFormat_TABULAR_NONE)}
         ]
       ]
      [ use_derivatives {N_mom(true,modelUseDerivsFlag)} ]
      [ correction {0}
        zeroth_order {N_mom(order,approxCorrectionOrder_0)}
        |
        first_order {N_mom(order,approxCorrectionOrder_1)}
        |
        second_order {N_mom(order,approxCorrectionOrder_2)}
        additive {N_mom(type,approxCorrectionType_ADDITIVE_CORRECTION)}
        |
        multiplicative {N_mom(type,approxCorrectionType_MULTIPLICATIVE_CORRECTION)}
        |
        combined {N_mom(type,approxCorrectionType_COMBINED_CORRECTION)}
       ]
      [ metrics ALIAS diagnostics STRINGLIST {N_mom(strL,diagMetrics)}
        [ cross_validation {N_mom(true,crossValidateFlag)}
          [ 
            folds INTEGER {N_mom(int,numFolds)}
            |
            percent REAL {N_mom(Real,percentFold)}
           ]
         ]
        [ press {N_mom(true,pressFlag)} ]
       ]
      [ import_challenge_points_file ALIAS challenge_points_file STRING {N_mom(str,importChallengePtsFile)}
        [ 
          ( custom_annotated {N_mom(utype,importChallengeFormat_TABULAR_NONE)}
            [ header {N_mom(augment_utype,importChallengeFormat_TABULAR_HEADER)}
              [ use_variable_labels {N_mom(true,importChalUseVariableLabels)} ]
             ]
            [ eval_id {N_mom(augment_utype,importChallengeFormat_TABULAR_EVAL_ID)} ]
            [ interface_id {N_mom(augment_utype,importChallengeFormat_TABULAR_IFACE_ID)} ]
           )
          |
          ( annotated {N_mom(utype,importChallengeFormat_TABULAR_ANNOTATED)}
            [ use_variable_labels {N_mom(true,importChalUseVariableLabels)} ]
           )
          |
          freeform {N_mom(utype,importChallengeFormat_TABULAR_NONE)}
         ]
        [ active_only {N_mom(true,importChallengeActive)} ]
       ]
     )
    |
    ( multipoint {0}
      tana {N_mom(lit,surrogateType_multipoint_tana)}
      |
      qmea {N_mom(lit,surrogateType_multipoint_qmea)}
      truth_model_pointer ALIAS actual_model_pointer STRING {N_mom(str,truthModelPointer)}
     )
    |
    ( local {N_mom(lit,surrogateType_local_taylor)}
      taylor_series {0}
      truth_model_pointer ALIAS actual_model_pointer STRING {N_mom(str,truthModelPointer)}
     )
    |
    ( ensemble {N_mom(lit,surrogateType_ensemble)}
      ( ordered_model_fidelities ALIAS model_fidelity_sequence STRINGLIST {N_mom(strL,ensembleModelPointers)}
        [ correction {0}
          zeroth_order {N_mom(order,approxCorrectionOrder_0)}
          |
          first_order {N_mom(order,approxCorrectionOrder_1)}
          |
          second_order {N_mom(order,approxCorrectionOrder_2)}
          additive {N_mom(type,approxCorrectionType_ADDITIVE_CORRECTION)}
          |
          multiplicative {N_mom(type,approxCorrectionType_MULTIPLICATIVE_CORRECTION)}
          |
          combined {N_mom(type,approxCorrectionType_COMBINED_CORRECTION)}
         ]
       )
      |
      ( truth_model_pointer ALIAS actual_model_pointer STRING {N_mom(str,truthModelPointer)}
        [ approximation_models ALIAS unordered_model_fidelities STRINGLIST {N_mom(strL,ensembleModelPointers)} ]
       )
     )
   )
  |
  ( nested {N_mom(lit,modelType_nested)}
    [ optional_interface_pointer STRING {N_mom(str,interfacePointer)}
      [ optional_interface_responses_pointer STRING {N_mom(str,optionalInterfRespPointer)} ]
     ]
    ( sub_method_pointer STRING {N_mom(str,subMethodPointer)}
      [ iterator_servers INTEGER > 0 {N_mom(int,subMethodServers)} ]
      [ iterator_scheduling {0}
        master {N_mom(type,subMethodScheduling_MASTER_SCHEDULING)}
        |
        peer {N_mom(type,subMethodScheduling_PEER_SCHEDULING)}
       ]
      [ processors_per_iterator INTEGER > 0 {N_mom(int,subMethodProcs)} ]
      [ primary_variable_mapping STRINGLIST {N_mom(strL,primaryVarMaps)} ]
      [ secondary_variable_mapping STRINGLIST {N_mom(strL,secondaryVarMaps)} ]
      [ primary_response_mapping REALLIST {N_mom(RealDL,primaryRespCoeffs)} ]
      [ secondary_response_mapping REALLIST {N_mom(RealDL,secondaryRespCoeffs)} ]
      [ identity_response_mapping {N_mom(true,identityRespMap)} ]
     )
   )
  |
  ( active_subspace ALIAS subspace {N_mom(lit,modelType_active_subspace)}
    truth_model_pointer ALIAS actual_model_pointer STRING {N_mom(str,truthModelPointer)}
    [ initial_samples INTEGER {N_mom(int,initialSamples)} ]
    [ sample_type {0}
      lhs {N_mom(utype,subspaceSampleType_SUBMETHOD_LHS)}
      |
      random {N_mom(utype,subspaceSampleType_SUBMETHOD_RANDOM)}
     ]
    [ truncation_method {0}
      [ bing_li {N_mom(true,subspaceIdBingLi)} ]
      [ constantine {N_mom(true,subspaceIdConstantine)} ]
      [ energy {N_mom(true,subspaceIdEnergy)}
        [ truncation_tolerance REAL {N_mom(Real,truncationTolerance)} ]
       ]
      [ cross_validation {N_mom(true,subspaceIdCV)}
        [ 
          minimum {N_mom(utype,subspaceIdCVMethod_MINIMUM_METRIC)}
          |
          relative {N_mom(utype,subspaceIdCVMethod_RELATIVE_TOLERANCE)}
          |
          decrease {N_mom(utype,subspaceIdCVMethod_DECREASE_TOLERANCE)}
         ]
        [ relative_tolerance REAL {N_mom(Real,relTolerance)} ]
        [ decrease_tolerance REAL {N_mom(Real,decreaseTolerance)} ]
        [ max_rank INTEGER {N_mom(int,subspaceCVMaxRank)} ]
        [ exhaustive {N_mom(false,subspaceCVIncremental)} ]
       ]
     ]
    [ dimension INTEGER {N_mom(int,subspaceDimension)} ]
    [ bootstrap_samples INTEGER {N_mom(int,numReplicates)} ]
    [ build_surrogate {N_mom(true,subspaceBuildSurrogate)}
      [ refinement_samples INTEGERLIST {N_mom(ivec,refineSamples)} ]
     ]
    [ normalization {0}
      mean_value {N_mom(utype,subspaceNormalization_SUBSPACE_NORM_MEAN_VALUE)}
      |
      mean_gradient {N_mom(utype,subspaceNormalization_SUBSPACE_NORM_MEAN_GRAD)}
      |
      local_gradient {N_mom(utype,subspaceNormalization_SUBSPACE_NORM_LOCAL_GRAD)}
     ]
   )
  |
  ( adapted_basis {N_mom(lit,modelType_adapted_basis)}
    ( truth_model_pointer ALIAS actual_model_pointer STRING {N_mom(str,truthModelPointer)}
      sparse_grid_level INTEGER {N_mom(ushint,adaptedBasisSparseGridLev)}
      |
      ( expansion_order INTEGER {N_mom(ushint,adaptedBasisExpOrder)}
        collocation_ratio REAL {N_mom(Real,adaptedBasisCollocRatio)}
       )
      [ dimension INTEGER {N_mom(int,subspaceDimension)} ]
      [ rotation_method {0}
        unranked {N_mom(type,method_rotation_ROTATION_METHOD_UNRANKED)}
        |
        ranked {N_mom(type,method_rotation_ROTATION_METHOD_RANKED)}
       ]
     )
    [ truncation_tolerance REAL {N_mom(Real,adaptedBasisTruncationTolerance)} ]
   )
  |
  ( random_field {N_mom(lit,modelType_random_field)}
    [ build_source {0}
      rf_data_file STRING {N_mom(str,rfDataFileName)}
      |
      dace_method_pointer STRING {N_mom(str,subMethodPointer)}
      |
      ( analytic_covariance {0}
        squared_exponential {N_mom(utype,analyticCovIdForm_EXP_L2)}
        |
        exponential {N_mom(utype,analyticCovIdForm_EXP_L1)}
       )
     ]
    [ expansion_form {0}
      karhunen_loeve {N_mom(utype,randomFieldIdForm_RF_KARHUNEN_LOEVE)}
      |
      principal_components {N_mom(utype,randomFieldIdForm_RF_PCA_GP)}
     ]
    [ expansion_bases INTEGER {N_mom(int,subspaceDimension)} ]
    [ truncation_tolerance REAL {N_mom(Real,truncationTolerance)} ]
    propagation_model_pointer STRING {N_mom(str,propagationModelPointer)}
   )
  [ variables_pointer STRING {N_mom(str,variablesPointer)} ]
  [ responses_pointer STRING {N_mom(str,responsesPointer)} ]
  [ hierarchical_tagging {N_mom(true,hierarchicalTags)} ]

KEYWORD variables {N_vam3(start,0,stop)}
  [ id_variables STRING {N_vam(str,idVariables)} ]
  [ active {0}
    all {N_vam(type,varsView_ALL_VIEW)}
    |
    design {N_vam(type,varsView_DESIGN_VIEW)}
    |
    uncertain {N_vam(type,varsView_UNCERTAIN_VIEW)}
    |
    aleatory {N_vam(type,varsView_ALEATORY_UNCERTAIN_VIEW)}
    |
    epistemic {N_vam(type,varsView_EPISTEMIC_UNCERTAIN_VIEW)}
    |
    state {N_vam(type,varsView_STATE_VIEW)}
   ]
  [ 
    mixed {N_vam(type,varsDomain_MIXED_DOMAIN)}
    |
    relaxed {N_vam(type,varsDomain_RELAXED_DOMAIN)}
   ]
  [ continuous_design INTEGER > 0 {N_vam(sizet,numContinuousDesVars)}
    [ initial_point ALIAS cdv_initial_point REALLIST LEN continuous_design {N_vam(rvec,continuousDesignVars)} ]
    [ lower_bounds ALIAS cdv_lower_bounds REALLIST LEN continuous_design {N_vam(rvec,continuousDesignLowerBnds)} ]
    [ upper_bounds ALIAS cdv_upper_bounds REALLIST LEN continuous_design {N_vam(rvec,continuousDesignUpperBnds)} ]
    [ scale_types ALIAS cdv_scale_types STRINGLIST LEN1 continuous_design {N_vam(strL,continuousDesignScaleTypes)} ]
    [ scales ALIAS cdv_scales REALLIST LEN1 continuous_design {N_vam(rvec,continuousDesignScales)} ]
    [ descriptors ALIAS cdv_descriptors STRINGLIST LEN continuous_design {N_vam(strL,continuousDesignLabels)} ]
   ]
  [ discrete_design_range INTEGER > 0 {N_vam(sizet,numDiscreteDesRangeVars)}
    [ initial_point ALIAS ddv_initial_point INTEGERLIST LEN discrete_design_range {N_vam(ivec,discreteDesignRangeVars)} ]
    [ lower_bounds ALIAS ddv_lower_bounds INTEGERLIST LEN discrete_design_range {N_vam(ivec,discreteDesignRangeLowerBnds)} ]
    [ upper_bounds ALIAS ddv_upper_bounds INTEGERLIST LEN discrete_design_range {N_vam(ivec,discreteDesignRangeUpperBnds)} ]
    [ descriptors ALIAS ddv_descriptors STRINGLIST LEN discrete_design_range {N_vam(strL,discreteDesignRangeLabels)} ]
   ]
  [ discrete_design_set {0}
    [ integer INTEGER > 0 {N_vam(sizet,numDiscreteDesSetIntVars)}
      [ elements_per_variable ALIAS num_set_values INTEGERLIST LEN1 integer {N_vam(newiarray,Var_Info_nddsi)} ]
      elements ALIAS set_values INTEGERLIST {N_vam(newivec,Var_Info_ddsi)}
      [ categorical STRINGLIST LEN integer {N_vam(categorical,discreteDesignSetIntCat)}
        [ adjacency_matrix INTEGERLIST {N_vam(newivec,Var_Info_ddsia)} ]
       ]
      [ initial_point INTEGERLIST LEN integer {N_vam(ivec,discreteDesignSetIntVars)} ]
      [ descriptors STRINGLIST LEN integer {N_vam(strL,discreteDesignSetIntLabels)} ]
     ]
    [ string INTEGER > 0 {N_vam(sizet,numDiscreteDesSetStrVars)}
      [ elements_per_variable ALIAS num_set_values INTEGERLIST LEN1 string {N_vam(newiarray,Var_Info_nddss)} ]
      elements ALIAS set_values STRINGLIST {N_vam(newsarray,Var_Info_ddss)}
      [ adjacency_matrix INTEGERLIST {N_vam(newivec,Var_Info_ddssa)} ]
      [ initial_point STRINGLIST LEN string {N_vam(strL,discreteDesignSetStrVars)} ]
      [ descriptors STRINGLIST LEN string {N_vam(strL,discreteDesignSetStrLabels)} ]
     ]
    [ real INTEGER > 0 {N_vam(sizet,numDiscreteDesSetRealVars)}
      [ elements_per_variable ALIAS num_set_values INTEGERLIST LEN1 real {N_vam(newiarray,Var_Info_nddsr)} ]
      elements ALIAS set_values REALLIST {N_vam(newrvec,Var_Info_ddsr)}
      [ categorical STRINGLIST LEN integer {N_vam(categorical,discreteDesignSetRealCat)}
        [ adjacency_matrix INTEGERLIST {N_vam(newivec,Var_Info_ddsra)} ]
       ]
      [ initial_point REALLIST LEN real {N_vam(rvec,discreteDesignSetRealVars)} ]
      [ descriptors STRINGLIST LEN real {N_vam(strL,discreteDesignSetRealLabels)} ]
     ]
   ]
  [ normal_uncertain INTEGER > 0 {N_vam(sizet,numNormalUncVars)}
    means ALIAS nuv_means REALLIST LEN normal_uncertain {N_vam(rvec,normalUncMeans)}
    std_deviations ALIAS nuv_std_deviations REALLIST LEN normal_uncertain {N_vam(RealLb,normalUncStdDevs)}
    [ lower_bounds ALIAS nuv_lower_bounds REALLIST LEN normal_uncertain {N_vam(rvec,normalUncLowerBnds)} ]
    [ upper_bounds ALIAS nuv_upper_bounds REALLIST LEN normal_uncertain {N_vam(rvec,normalUncUpperBnds)} ]
    [ initial_point REALLIST LEN normal_uncertain {N_vam(rvec,normalUncVars)} ]
    [ descriptors ALIAS nuv_descriptors STRINGLIST LEN normal_uncertain {N_vae(caulbl,CAUVar_normal)} ]
   ]
  [ lognormal_uncertain INTEGER > 0 {N_vam(sizet,numLognormalUncVars)}
    ( lambdas ALIAS lnuv_lambdas REALLIST LEN lognormal_uncertain {N_vam(rvec,lognormalUncLambdas)}
      zetas ALIAS lnuv_zetas REALLIST LEN lognormal_uncertain {N_vam(RealLb,lognormalUncZetas)}
     )
    |
    ( means ALIAS lnuv_means REALLIST LEN lognormal_uncertain {N_vam(RealLb,lognormalUncMeans)}
      std_deviations ALIAS lnuv_std_deviations REALLIST LEN lognormal_uncertain {N_vam(RealLb,lognormalUncStdDevs)}
      |
      error_factors ALIAS lnuv_error_factors REALLIST LEN lognormal_uncertain {N_vam(RealLb,lognormalUncErrFacts)}
     )
    [ lower_bounds ALIAS lnuv_lower_bounds REALLIST LEN lognormal_uncertain {N_vam(RealLb,lognormalUncLowerBnds)} ]
    [ upper_bounds ALIAS lnuv_upper_bounds REALLIST LEN lognormal_uncertain {N_vam(RealUb,lognormalUncUpperBnds)} ]
    [ initial_point REALLIST LEN lognormal_uncertain {N_vam(RealLb,lognormalUncVars)} ]
    [ descriptors ALIAS lnuv_descriptors STRINGLIST LEN lognormal_uncertain {N_vae(caulbl,CAUVar_lognormal)} ]
   ]
  [ uniform_uncertain INTEGER > 0 {N_vam(sizet,numUniformUncVars)}
    lower_bounds ALIAS uuv_lower_bounds REALLIST LEN uniform_uncertain {N_vam(RealLb,uniformUncLowerBnds)}
    upper_bounds ALIAS uuv_upper_bounds REALLIST LEN uniform_uncertain {N_vam(RealUb,uniformUncUpperBnds)}
    [ initial_point REALLIST LEN uniform_uncertain {N_vam(rvec,uniformUncVars)} ]
    [ descriptors ALIAS uuv_descriptors STRINGLIST LEN uniform_uncertain {N_vae(caulbl,CAUVar_uniform)} ]
   ]
  [ loguniform_uncertain INTEGER > 0 {N_vam(sizet,numLoguniformUncVars)}
    lower_bounds ALIAS luuv_lower_bounds REALLIST LEN loguniform_uncertain {N_vam(RealLb,loguniformUncLowerBnds)}
    upper_bounds ALIAS luuv_upper_bounds REALLIST LEN loguniform_uncertain {N_vam(RealUb,loguniformUncUpperBnds)}
    [ initial_point REALLIST LEN loguniform_uncertain {N_vam(RealLb,loguniformUncVars)} ]
    [ descriptors ALIAS luuv_descriptors STRINGLIST LEN loguniform_uncertain {N_vae(caulbl,CAUVar_loguniform)} ]
   ]
  [ triangular_uncertain INTEGER > 0 {N_vam(sizet,numTriangularUncVars)}
    modes ALIAS tuv_modes REALLIST LEN triangular_uncertain {N_vam(rvec,triangularUncModes)}
    lower_bounds ALIAS tuv_lower_bounds REALLIST LEN triangular_uncertain {N_vam(RealLb,triangularUncLowerBnds)}
    upper_bounds ALIAS tuv_upper_bounds REALLIST LEN triangular_uncertain {N_vam(RealUb,triangularUncUpperBnds)}
    [ initial_point REALLIST LEN triangular_uncertain {N_vam(rvec,triangularUncVars)} ]
    [ descriptors ALIAS tuv_descriptors STRINGLIST LEN triangular_uncertain {N_vae(caulbl,CAUVar_triangular)} ]
   ]
  [ exponential_uncertain INTEGER > 0 {N_vam(sizet,numExponentialUncVars)}
    betas ALIAS euv_betas REALLIST LEN exponential_uncertain {N_vam(RealLb,exponentialUncBetas)}
    [ initial_point REALLIST LEN exponential_uncertain {N_vam(RealLb,exponentialUncVars)} ]
    [ descriptors ALIAS euv_descriptors STRINGLIST LEN exponential_uncertain {N_vae(caulbl,CAUVar_exponential)} ]
   ]
  [ beta_uncertain INTEGER > 0 {N_vam(sizet,numBetaUncVars)}
    alphas ALIAS buv_alphas REALLIST LEN beta_uncertain {N_vam(RealLb,betaUncAlphas)}
    betas ALIAS buv_betas REALLIST LEN beta_uncertain {N_vam(RealLb,betaUncBetas)}
    lower_bounds ALIAS buv_lower_bounds REALLIST LEN beta_uncertain {N_vam(rvec,betaUncLowerBnds)}
    upper_bounds ALIAS buv_upper_bounds REALLIST LEN beta_uncertain {N_vam(rvec,betaUncUpperBnds)}
    [ initial_point REALLIST LEN beta_uncertain {N_vam(rvec,betaUncVars)} ]
    [ descriptors ALIAS buv_descriptors STRINGLIST LEN beta_uncertain {N_vae(caulbl,CAUVar_beta)} ]
   ]
  [ gamma_uncertain INTEGER > 0 {N_vam(sizet,numGammaUncVars)}
    alphas ALIAS gauv_alphas REALLIST LEN gamma_uncertain {N_vam(RealLb,gammaUncAlphas)}
    betas ALIAS gauv_betas REALLIST LEN gamma_uncertain {N_vam(RealLb,gammaUncBetas)}
    [ initial_point REALLIST LEN gamma_uncertain {N_vam(RealLb,gammaUncVars)} ]
    [ descriptors ALIAS gauv_descriptors STRINGLIST LEN gamma_uncertain {N_vae(caulbl,CAUVar_gamma)} ]
   ]
  [ gumbel_uncertain INTEGER > 0 {N_vam(sizet,numGumbelUncVars)}
    alphas ALIAS guuv_alphas REALLIST LEN gumbel_uncertain {N_vam(RealLb,gumbelUncAlphas)}
    betas ALIAS guuv_betas REALLIST LEN gumbel_uncertain {N_vam(rvec,gumbelUncBetas)}
    [ initial_point REALLIST LEN gumbel_uncertain {N_vam(rvec,gumbelUncVars)} ]
    [ descriptors ALIAS guuv_descriptors STRINGLIST LEN gumbel_uncertain {N_vae(caulbl,CAUVar_gumbel)} ]
   ]
  [ frechet_uncertain INTEGER > 0 {N_vam(sizet,numFrechetUncVars)}
    alphas ALIAS fuv_alphas REALLIST LEN frechet_uncertain {N_vam(RealLb,frechetUncAlphas)}
    betas ALIAS fuv_betas REALLIST LEN frechet_uncertain {N_vam(rvec,frechetUncBetas)}
    [ initial_point REALLIST LEN frechet_uncertain {N_vam(rvec,frechetUncVars)} ]
    [ descriptors ALIAS fuv_descriptors STRINGLIST LEN frechet_uncertain {N_vae(caulbl,CAUVar_frechet)} ]
   ]
  [ weibull_uncertain INTEGER > 0 {N_vam(sizet,numWeibullUncVars)}
    alphas ALIAS wuv_alphas REALLIST LEN weibull_uncertain {N_vam(RealLb,weibullUncAlphas)}
    betas ALIAS wuv_betas REALLIST LEN weibull_uncertain {N_vam(RealLb,weibullUncBetas)}
    [ initial_point REALLIST LEN weibull_uncertain {N_vam(RealLb,weibullUncVars)} ]
    [ descriptors ALIAS wuv_descriptors STRINGLIST LEN weibull_uncertain {N_vae(caulbl,CAUVar_weibull)} ]
   ]
  [ histogram_bin_uncertain INTEGER > 0 {N_vam(sizet,numHistogramBinUncVars)}
    [ pairs_per_variable ALIAS num_pairs INTEGERLIST LEN histogram_bin_uncertain {N_vam(newiarray,Var_Info_nhbp)} ]
    abscissas ALIAS huv_bin_abscissas REALLIST {N_vam(newrvec,Var_Info_hba)}
    ordinates ALIAS huv_bin_ordinates REALLIST {N_vam(newrvec,Var_Info_hbo)}
    |
    counts ALIAS huv_bin_counts REALLIST {N_vam(newrvec,Var_Info_hbc)}
    [ initial_point REALLIST LEN histogram_bin_uncertain {N_vam(rvec,histogramBinUncVars)} ]
    [ descriptors ALIAS huv_bin_descriptors STRINGLIST LEN histogram_bin_uncertain {N_vae(caulbl,CAUVar_histogram_bin)} ]
   ]
  [ poisson_uncertain INTEGER > 0 {N_vam(sizet,numPoissonUncVars)}
    lambdas REALLIST LEN poisson_uncertain {N_vam(RealLb,poissonUncLambdas)}
    [ initial_point INTEGERLIST LEN poisson_uncertain {N_vam(IntLb,poissonUncVars)} ]
    [ descriptors STRINGLIST LEN poisson_uncertain {N_vae(dauilbl,DAUIVar_poisson)} ]
   ]
  [ binomial_uncertain INTEGER > 0 {N_vam(sizet,numBinomialUncVars)}
    probability_per_trial ALIAS prob_per_trial REALLIST LEN binomial_uncertain {N_vam(rvec,binomialUncProbPerTrial)}
    num_trials INTEGERLIST LEN binomial_uncertain {N_vam(IntLb,binomialUncNumTrials)}
    [ initial_point INTEGERLIST LEN binomial_uncertain {N_vam(IntLb,binomialUncVars)} ]
    [ descriptors STRINGLIST LEN binomial_uncertain {N_vae(dauilbl,DAUIVar_binomial)} ]
   ]
  [ negative_binomial_uncertain INTEGER > 0 {N_vam(sizet,numNegBinomialUncVars)}
    probability_per_trial ALIAS prob_per_trial REALLIST LEN negative_binomial_uncertain {N_vam(rvec,negBinomialUncProbPerTrial)}
    num_trials INTEGERLIST LEN negative_binomial_uncertain {N_vam(IntLb,negBinomialUncNumTrials)}
    [ initial_point INTEGERLIST LEN negative_binomial_uncertain {N_vam(IntLb,negBinomialUncVars)} ]
    [ descriptors STRINGLIST LEN negative_binomial_uncertain {N_vae(dauilbl,DAUIVar_negative_binomial)} ]
   ]
  [ geometric_uncertain INTEGER > 0 {N_vam(sizet,numGeometricUncVars)}
    probability_per_trial ALIAS prob_per_trial REALLIST LEN geometric_uncertain {N_vam(rvec,geometricUncProbPerTrial)}
    [ initial_point INTEGERLIST LEN geometric_uncertain {N_vam(IntLb,geometricUncVars)} ]
    [ descriptors STRINGLIST LEN geometric_uncertain {N_vae(dauilbl,DAUIVar_geometric)} ]
   ]
  [ hypergeometric_uncertain INTEGER > 0 {N_vam(sizet,numHyperGeomUncVars)}
    total_population INTEGERLIST LEN hypergeometric_uncertain {N_vam(IntLb,hyperGeomUncTotalPop)}
    selected_population INTEGERLIST LEN hypergeometric_uncertain {N_vam(IntLb,hyperGeomUncSelectedPop)}
    num_drawn INTEGERLIST LEN hypergeometric_uncertain {N_vam(IntLb,hyperGeomUncNumDrawn)}
    [ initial_point INTEGERLIST LEN hypergeometric_uncertain {N_vam(IntLb,hyperGeomUncVars)} ]
    [ descriptors STRINGLIST LEN hypergeometric_uncertain {N_vae(dauilbl,DAUIVar_hypergeometric)} ]
   ]
  [ histogram_point_uncertain {0}
    [ integer INTEGER > 0 {N_vam(sizet,numHistogramPtIntUncVars)}
      [ pairs_per_variable ALIAS num_pairs INTEGERLIST LEN integer {N_vam(newiarray,Var_Info_nhpip)} ]
      abscissas INTEGERLIST {N_vam(newivec,Var_Info_hpia)}
      counts REALLIST {N_vam(newrvec,Var_Info_hpic)}
      [ initial_point INTEGERLIST LEN integer {N_vam(ivec,histogramPointIntUncVars)} ]
      [ descriptors STRINGLIST LEN integer {N_vae(dauilbl,DAUIVar_histogram_point_int)} ]
     ]
    [ string INTEGER > 0 {N_vam(sizet,numHistogramPtStrUncVars)}
      [ pairs_per_variable ALIAS num_pairs INTEGERLIST LEN string {N_vam(newiarray,Var_Info_nhpsp)} ]
      abscissas STRINGLIST {N_vam(newsarray,Var_Info_hpsa)}
      counts REALLIST {N_vam(newrvec,Var_Info_hpsc)}
      [ initial_point STRINGLIST LEN string {N_vam(strL,histogramPointStrUncVars)} ]
      [ descriptors STRINGLIST LEN string {N_vae(dauslbl,DAUSVar_histogram_point_str)} ]
     ]
    [ real INTEGER > 0 {N_vam(sizet,numHistogramPtRealUncVars)}
      [ pairs_per_variable ALIAS num_pairs INTEGERLIST LEN real {N_vam(newiarray,Var_Info_nhprp)} ]
      abscissas REALLIST {N_vam(newrvec,Var_Info_hpra)}
      counts REALLIST {N_vam(newrvec,Var_Info_hprc)}
      [ initial_point REALLIST LEN real {N_vam(rvec,histogramPointRealUncVars)} ]
      [ descriptors STRINGLIST LEN real {N_vae(daurlbl,DAURVar_histogram_point_real)} ]
     ]
   ]
  [ uncertain_correlation_matrix REALLIST {N_vam(newrvec,Var_Info_ucm)} ]
  [ continuous_interval_uncertain ALIAS interval_uncertain INTEGER > 0 {N_vam(sizet,numContinuousIntervalUncVars)}
    [ num_intervals ALIAS iuv_num_intervals INTEGERLIST LEN continuous_interval_uncertain {N_vam(newiarray,Var_Info_nCI)} ]
    [ interval_probabilities ALIAS interval_probs ALIAS iuv_interval_probs REALLIST {N_vam(newrvec,Var_Info_CIp)} ]
    lower_bounds REALLIST {N_vam(newrvec,Var_Info_CIlb)}
    upper_bounds REALLIST {N_vam(newrvec,Var_Info_CIub)}
    [ initial_point REALLIST LEN continuous_interval_uncertain {N_vam(rvec,continuousIntervalUncVars)} ]
    [ descriptors ALIAS iuv_descriptors STRINGLIST LEN continuous_interval_uncertain {N_vae(ceulbl,CEUVar_interval)} ]
   ]
  [ discrete_interval_uncertain INTEGER > 0 {N_vam(sizet,numDiscreteIntervalUncVars)}
    [ num_intervals INTEGERLIST LEN discrete_interval_uncertain {N_vam(newiarray,Var_Info_nDI)} ]
    [ interval_probabilities ALIAS interval_probs ALIAS range_probabilities ALIAS range_probs REALLIST {N_vam(newrvec,Var_Info_DIp)} ]
    lower_bounds INTEGERLIST {N_vam(newivec,Var_Info_DIlb)}
    upper_bounds INTEGERLIST {N_vam(newivec,Var_Info_DIub)}
    [ initial_point INTEGERLIST LEN discrete_interval_uncertain {N_vam(ivec,discreteIntervalUncVars)} ]
    [ descriptors STRINGLIST LEN discrete_interval_uncertain {N_vae(deuilbl,DEUIVar_interval)} ]
   ]
  [ discrete_uncertain_set {0}
    [ integer INTEGER > 0 {N_vam(sizet,numDiscreteUncSetIntVars)}
      [ elements_per_variable ALIAS num_set_values INTEGERLIST LEN integer {N_vam(newiarray,Var_Info_ndusi)} ]
      elements ALIAS set_values INTEGERLIST {N_vam(newivec,Var_Info_dusi)}
      [ set_probabilities ALIAS set_probs REALLIST {N_vam(newrvec,Var_Info_DSIp)} ]
      [ categorical STRINGLIST LEN integer {N_vam(categorical,discreteUncSetIntCat)} ]
      [ initial_point INTEGERLIST LEN integer {N_vam(ivec,discreteUncSetIntVars)} ]
      [ descriptors STRINGLIST LEN integer {N_vae(deuilbl,DEUIVar_set_int)} ]
     ]
    [ string INTEGER > 0 {N_vam(sizet,numDiscreteUncSetStrVars)}
      [ elements_per_variable ALIAS num_set_values INTEGERLIST LEN string {N_vam(newiarray,Var_Info_nduss)} ]
      elements ALIAS set_values STRINGLIST {N_vam(newsarray,Var_Info_duss)}
      [ set_probabilities ALIAS set_probs REALLIST {N_vam(newrvec,Var_Info_DSSp)} ]
      [ initial_point STRINGLIST LEN string {N_vam(strL,discreteUncSetStrVars)} ]
      [ descriptors STRINGLIST LEN string {N_vae(deuslbl,DEUSVar_set_str)} ]
     ]
    [ real INTEGER > 0 {N_vam(sizet,numDiscreteUncSetRealVars)}
      [ elements_per_variable ALIAS num_set_values INTEGERLIST LEN real {N_vam(newiarray,Var_Info_ndusr)} ]
      elements ALIAS set_values REALLIST {N_vam(newrvec,Var_Info_dusr)}
      [ set_probabilities ALIAS set_probs REALLIST {N_vam(newrvec,Var_Info_DSRp)} ]
      [ categorical STRINGLIST LEN real {N_vam(categorical,discreteUncSetRealCat)} ]
      [ initial_point REALLIST LEN real {N_vam(rvec,discreteUncSetRealVars)} ]
      [ descriptors STRINGLIST LEN real {N_vae(deurlbl,DEURVar_set_real)} ]
     ]
   ]
  [ continuous_state INTEGER > 0 {N_vam(sizet,numContinuousStateVars)}
    [ initial_state ALIAS csv_initial_state REALLIST LEN continuous_state {N_vam(rvec,continuousStateVars)} ]
    [ lower_bounds ALIAS csv_lower_bounds REALLIST LEN continuous_state {N_vam(rvec,continuousStateLowerBnds)} ]
    [ upper_bounds ALIAS csv_upper_bounds REALLIST LEN continuous_state {N_vam(rvec,continuousStateUpperBnds)} ]
    [ descriptors ALIAS csv_descriptors STRINGLIST LEN continuous_state {N_vam(strL,continuousStateLabels)} ]
   ]
  [ discrete_state_range INTEGER > 0 {N_vam(sizet,numDiscreteStateRangeVars)}
    [ initial_state ALIAS dsv_initial_state INTEGERLIST LEN discrete_state_range {N_vam(ivec,discreteStateRangeVars)} ]
    [ lower_bounds ALIAS dsv_lower_bounds INTEGERLIST LEN discrete_state_range {N_vam(ivec,discreteStateRangeLowerBnds)} ]
    [ upper_bounds ALIAS dsv_upper_bounds INTEGERLIST LEN discrete_state_range {N_vam(ivec,discreteStateRangeUpperBnds)} ]
    [ descriptors ALIAS dsv_descriptors STRINGLIST LEN discrete_state_range {N_vam(strL,discreteStateRangeLabels)} ]
   ]
  [ discrete_state_set {0}
    [ integer INTEGER > 0 {N_vam(sizet,numDiscreteStateSetIntVars)}
      [ elements_per_variable ALIAS num_set_values INTEGERLIST LEN1 integer {N_vam(newiarray,Var_Info_ndssi)} ]
      elements ALIAS set_values INTEGERLIST {N_vam(newivec,Var_Info_dssi)}
      [ categorical STRINGLIST LEN integer {N_vam(categorical,discreteStateSetIntCat)} ]
      [ initial_state INTEGERLIST LEN integer {N_vam(ivec,discreteStateSetIntVars)} ]
      [ descriptors STRINGLIST LEN integer {N_vam(strL,discreteStateSetIntLabels)} ]
     ]
    [ string INTEGER > 0 {N_vam(sizet,numDiscreteStateSetStrVars)}
      [ elements_per_variable ALIAS num_set_values INTEGERLIST LEN1 string {N_vam(newiarray,Var_Info_ndsss)} ]
      elements ALIAS set_values STRINGLIST {N_vam(newsarray,Var_Info_dsss)}
      [ initial_state STRINGLIST LEN string {N_vam(strL,discreteStateSetStrVars)} ]
      [ descriptors STRINGLIST LEN string {N_vam(strL,discreteStateSetStrLabels)} ]
     ]
    [ real INTEGER > 0 {N_vam(sizet,numDiscreteStateSetRealVars)}
      [ elements_per_variable ALIAS num_set_values INTEGERLIST LEN1 real {N_vam(newiarray,Var_Info_ndssr)} ]
      elements ALIAS set_values REALLIST {N_vam(newrvec,Var_Info_dssr)}
      [ categorical STRINGLIST LEN integer {N_vam(categorical,discreteStateSetRealCat)} ]
      [ initial_state REALLIST LEN real {N_vam(rvec,discreteStateSetRealVars)} ]
      [ descriptors STRINGLIST LEN real {N_vam(strL,discreteStateSetRealLabels)} ]
     ]
   ]
  [ linear_inequality_constraint_matrix REALLIST {N_vam(rvec,linearIneqConstraintCoeffs)} ]
  [ linear_inequality_lower_bounds REALLIST {N_vam(rvec,linearIneqLowerBnds)} ]
  [ linear_inequality_upper_bounds REALLIST {N_vam(rvec,linearIneqUpperBnds)} ]
  [ linear_inequality_scale_types STRINGLIST {N_vam(strL,linearIneqScaleTypes)} ]
  [ linear_inequality_scales REALLIST {N_vam(rvec,linearIneqScales)} ]
  [ linear_equality_constraint_matrix REALLIST {N_vam(rvec,linearEqConstraintCoeffs)} ]
  [ linear_equality_targets REALLIST {N_vam(rvec,linearEqTargets)} ]
  [ linear_equality_scale_types STRINGLIST {N_vam(strL,linearEqScaleTypes)} ]
  [ linear_equality_scales REALLIST {N_vam(rvec,linearEqScales)} ]

KEYWORD interface {N_ifm3(start,0,stop)}
  [ id_interface STRING {N_ifm(str,idInterface)} ]
  [ analysis_drivers STRINGLIST {N_ifm(strL,analysisDrivers)}
    [ input_filter STRING {N_ifm(str,inputFilter)} ]
    [ output_filter STRING {N_ifm(str,outputFilter)} ]
    ( system {N_ifm(type,interfaceType_SYSTEM_INTERFACE)}
      [ parameters_file STRING {N_ifm(str,parametersFile)} ]
      [ results_file STRING {N_ifm(str,resultsFile)} ]
      [ parameters_format {N_ifm(type,parametersFileFormat_PARAMETERS_FILE_STANDARD)}
        standard {N_ifm(type,parametersFileFormat_PARAMETERS_FILE_STANDARD)}
        |
        aprepro {N_ifm(type,parametersFileFormat_PARAMETERS_FILE_APREPRO)}
        |
        json {N_ifm(type,parametersFileFormat_PARAMETERS_FILE_JSON)}
       ]
      [ results_format {N_ifm(type,resultsFileFormat_RESULTS_FILE_STANDARD)}
        ( standard {N_ifm(type,resultsFileFormat_RESULTS_FILE_STANDARD)}
          [ labeled {N_ifm(true,dakotaResultsFileLabeled)} ]
         )
        |
        json {N_ifm(type,resultsFileFormat_RESULTS_FILE_JSON)}
       ]
      [ file_tag {N_ifm(true,fileTagFlag)} ]
      [ file_save {N_ifm(true,fileSaveFlag)} ]
      [ work_directory {N_ifm(true,useWorkdir)}
        [ named STRING {N_ifm(str,workDir)} ]
        [ directory_tag ALIAS dir_tag {N_ifm(true,dirTag)} ]
        [ directory_save ALIAS dir_save {N_ifm(true,dirSave)} ]
        [ link_files STRINGLIST {N_ifm(strL,linkFiles)} ]
        [ copy_files STRINGLIST {N_ifm(strL,copyFiles)} ]
        [ replace {N_ifm(true,templateReplace)} ]
       ]
      [ allow_existing_results {N_ifm(true,allowExistingResultsFlag)} ]
      [ verbatim {N_ifm(true,verbatimFlag)} ]
     )
    |
    ( fork {N_ifm(type,interfaceType_FORK_INTERFACE)}
      [ parameters_file STRING {N_ifm(str,parametersFile)} ]
      [ results_file STRING {N_ifm(str,resultsFile)} ]
      [ parameters_format {N_ifm(type,parametersFileFormat_PARAMETERS_FILE_STANDARD)}
        standard {N_ifm(type,parametersFileFormat_PARAMETERS_FILE_STANDARD)}
        |
        aprepro {N_ifm(type,parametersFileFormat_PARAMETERS_FILE_APREPRO)}
        |
        json {N_ifm(type,parametersFileFormat_PARAMETERS_FILE_JSON)}
       ]
      [ results_format {N_ifm(type,resultsFileFormat_RESULTS_FILE_STANDARD)}
        ( standard {N_ifm(type,resultsFileFormat_RESULTS_FILE_STANDARD)}
          [ labeled {N_ifm(true,dakotaResultsFileLabeled)} ]
         )
        |
        json {N_ifm(type,resultsFileFormat_RESULTS_FILE_JSON)}
       ]
      [ file_tag {N_ifm(true,fileTagFlag)} ]
      [ file_save {N_ifm(true,fileSaveFlag)} ]
      [ work_directory {N_ifm(true,useWorkdir)}
        [ named STRING {N_ifm(str,workDir)} ]
        [ directory_tag ALIAS dir_tag {N_ifm(true,dirTag)} ]
        [ directory_save ALIAS dir_save {N_ifm(true,dirSave)} ]
        [ link_files STRINGLIST {N_ifm(strL,linkFiles)} ]
        [ copy_files STRINGLIST {N_ifm(strL,copyFiles)} ]
        [ replace {N_ifm(true,templateReplace)} ]
       ]
      [ allow_existing_results {N_ifm(true,allowExistingResultsFlag)} ]
      [ verbatim {N_ifm(true,verbatimFlag)} ]
     )
    |
    ( direct {N_ifm(type,interfaceType_TEST_INTERFACE)}
      [ processors_per_analysis INTEGER > 0 {N_ifm(int,procsPerAnalysis)} ]
     )
    |
    ( plugin {N_ifm(type,interfaceType_PLUGIN_INTERFACE)}
      library_path STRING {N_ifm(str,pluginLibraryPath)}
     )
    |
    matlab {N_ifm(type,interfaceType_MATLAB_INTERFACE)}
    |
    ( python {N_ifm(type,interfaceType_PYTHON_INTERFACE)}
      [ numpy {N_ifm(true,numpyFlag)} ]
     )
    |
    ( legacy_python {N_ifm(type,interfaceType_LEGACY_PYTHON_INTERFACE)}
      [ numpy {N_ifm(true,numpyFlag)} ]
     )
    |
    scilab {N_ifm(type,interfaceType_SCILAB_INTERFACE)}
    |
    grid {N_ifm(type,interfaceType_GRID_INTERFACE)}
    [ analysis_components STRINGLIST {N_ifm(str2D,analysisComponents)} ]
   ]
  [ algebraic_mappings STRING {N_ifm(str,algebraicMappings)} ]
  [ failure_capture {0}
    abort {N_ifm(lit,failAction_abort)}
    |
    retry INTEGER {N_ifm(ilit,TYPE_DATA_failAction_retry)}
    |
    recover REALLIST {N_ifm(Rlit,TYPE_DATA_failAction_recover)}
    |
    continuation {N_ifm(lit,failAction_continuation)}
   ]
  [ deactivate {0}
    [ active_set_vector {N_ifm(false,activeSetVectorFlag)} ]
    [ evaluation_cache {N_ifm(false,evalCacheFlag)} ]
    [ strict_cache_equality {N_ifm(true,nearbyEvalCacheFlag)}
      [ cache_tolerance REAL {N_ifm(Real,nearbyEvalCacheTol)} ]
     ]
    [ restart_file {N_ifm(false,restartFileFlag)} ]
   ]
  [ 
    ( batch {N_ifm(true,batchEvalFlag)}
      [ size INTEGER > 0 {N_ifm(int,asynchLocalEvalConcurrency)} ]
     )
    |
    ( asynchronous {N_ifm(true, asynchFlag)}
      [ evaluation_concurrency INTEGER > 0 {N_ifm(int,asynchLocalEvalConcurrency)} ]
      [ local_evaluation_scheduling {0}
        dynamic {N_ifm(type,asynchLocalEvalScheduling_DYNAMIC_SCHEDULING)}
        |
        static {N_ifm(type,asynchLocalEvalScheduling_STATIC_SCHEDULING)}
       ]
      [ analysis_concurrency INTEGER > 0 {N_ifm(int,asynchLocalAnalysisConcurrency)} ]
     )
   ]
  [ evaluation_servers INTEGER > 0 {N_ifm(int,evalServers)} ]
  [ evaluation_scheduling {0}
    master {N_ifm(type,evalScheduling_MASTER_SCHEDULING)}
    |
    ( peer {0}
      dynamic {N_ifm(type,evalScheduling_PEER_DYNAMIC_SCHEDULING)}
      |
      static {N_ifm(type,evalScheduling_PEER_STATIC_SCHEDULING)}
     )
   ]
  [ processors_per_evaluation INTEGER > 0 {N_ifm(int,procsPerEval)} ]
  [ analysis_servers INTEGER > 0 {N_ifm(int,analysisServers)} ]
  [ analysis_scheduling {0}
    master {N_ifm(type,analysisScheduling_MASTER_SCHEDULING)}
    |
    peer {N_ifm(type,analysisScheduling_PEER_SCHEDULING)}
   ]

KEYWORD responses {N_rem3(start,0,stop)}
  [ id_responses STRING {N_rem(str,idResponses)} ]
  [ descriptors ALIAS response_descriptors STRINGLIST {N_rem(strL,responseLabels)} ]
  ( objective_functions ALIAS num_objective_functions INTEGER >= 0 {N_rem(sizet,numObjectiveFunctions)}
    [ sense STRINGLIST LEN1 objective_functions {N_rem(strL,primaryRespFnSense)} ]
    [ primary_scale_types ALIAS objective_function_scale_types STRINGLIST LEN1 objective_functions {N_rem(strL,primaryRespFnScaleTypes)} ]
    [ primary_scales ALIAS objective_function_scales REALLIST {N_rem(RealDL,primaryRespFnScales)} ]
    [ weights ALIAS multi_objective_weights REALLIST LEN objective_functions {N_rem(RealDL,primaryRespFnWeights)} ]
    [ nonlinear_inequality_constraints ALIAS num_nonlinear_inequality_constraints INTEGER >= 0 {N_rem(sizet,numNonlinearIneqConstraints)}
      [ lower_bounds ALIAS nonlinear_inequality_lower_bounds REALLIST LEN nonlinear_inequality_constraints {N_rem(RealDL,nonlinearIneqLowerBnds)} ]
      [ upper_bounds ALIAS nonlinear_inequality_upper_bounds REALLIST LEN nonlinear_inequality_constraints {N_rem(RealDL,nonlinearIneqUpperBnds)} ]
      [ scale_types ALIAS nonlinear_inequality_scale_types STRINGLIST LEN1 nonlinear_inequality_constraints {N_rem(strL,nonlinearIneqScaleTypes)} ]
      [ scales ALIAS nonlinear_inequality_scales REALLIST LEN1 nonlinear_inequality_constraints {N_rem(RealDL,nonlinearIneqScales)} ]
     ]
    [ nonlinear_equality_constraints ALIAS num_nonlinear_equality_constraints INTEGER >= 0 {N_rem(sizet,numNonlinearEqConstraints)}
      [ targets ALIAS nonlinear_equality_targets REALLIST LEN nonlinear_equality_constraints {N_rem(RealDL,nonlinearEqTargets)} ]
      [ scale_types ALIAS nonlinear_equality_scale_types STRINGLIST LEN1 nonlinear_equality_constraints {N_rem(strL,nonlinearEqScaleTypes)} ]
      [ scales ALIAS nonlinear_equality_scales REALLIST LEN1 nonlinear_equality_constraints {N_rem(RealDL,nonlinearEqScales)} ]
     ]
    [ scalar_objectives ALIAS num_scalar_objectives INTEGER >= 0 {N_rem(sizet,numScalarObjectiveFunctions)} ]
    [ field_objectives ALIAS num_field_objectives INTEGER >= 0 {N_rem(sizet,numFieldObjectiveFunctions)}
      lengths INTEGERLIST LEN field_objectives {N_rem(ivec,fieldLengths)}
      [ num_coordinates_per_field INTEGERLIST {N_rem(ivec,numCoordsPerField)} ]
      [ read_field_coordinates {N_rem(true,readFieldCoords)} ]
     ]
   )
  |
  ( calibration_terms ALIAS least_squares_terms ALIAS num_least_squares_terms INTEGER >= 0 {N_rem(sizet,numLeastSqTerms)}
    [ scalar_calibration_terms INTEGER >= 0 {N_rem(sizet,numScalarLeastSqTerms)} ]
    [ field_calibration_terms INTEGER >= 0 {N_rem(sizet,numFieldLeastSqTerms)}
      lengths INTEGERLIST LEN field_calibration_terms {N_rem(ivec,fieldLengths)}
      [ num_coordinates_per_field INTEGERLIST {N_rem(ivec,numCoordsPerField)} ]
      [ read_field_coordinates {N_rem(true,readFieldCoords)} ]
     ]
    [ primary_scales ALIAS calibration_term_scales ALIAS least_squares_term_scales REALLIST {N_rem(RealDL,primaryRespFnScales)} ]
    [ weights ALIAS calibration_weights ALIAS least_squares_weights REALLIST LEN calibration_terms {N_rem(RealDL,primaryRespFnWeights)} ]
    [ 
      ( calibration_data {N_rem(true,calibrationDataFlag)}
        [ data_directory STRING {N_rem(str,dataPathPrefix)} ]
        [ num_experiments INTEGER >= 0 {N_rem(sizet,numExperiments)} ]
        [ num_config_variables INTEGER >= 0 {N_rem(sizet,numExpConfigVars)} ]
        [ experiment_variance_type ALIAS variance_type STRINGLIST LEN1 field_calibration_terms {N_rem(strL,varianceType)} ]
        [ scalar_data_file STRING {N_rem(str,scalarDataFileName)}
          [ 
            ( custom_annotated {N_rem(utype,scalarDataFormat_TABULAR_NONE)}
              [ header {N_rem(augment_utype,scalarDataFormat_TABULAR_HEADER)} ]
              [ exp_id {N_rem(augment_utype,scalarDataFormat_TABULAR_EVAL_ID)} ]
             )
            |
            annotated {N_rem(utype,scalarDataFormat_TABULAR_EXPER_ANNOT)}
            |
            freeform {N_rem(utype,scalarDataFormat_TABULAR_NONE)}
           ]
         ]
        [ interpolate {N_rem(true,interpolateFlag)} ]
       )
      |
      ( calibration_data_file ALIAS least_squares_data_file STRING {N_rem(str,scalarDataFileName)}
        [ 
          ( custom_annotated {N_rem(utype,scalarDataFormat_TABULAR_NONE)}
            [ header {N_rem(augment_utype,scalarDataFormat_TABULAR_HEADER)} ]
            [ exp_id {N_rem(augment_utype,scalarDataFormat_TABULAR_EVAL_ID)} ]
           )
          |
          annotated {N_rem(utype,scalarDataFormat_TABULAR_EXPER_ANNOT)}
          |
          freeform {N_rem(utype,scalarDataFormat_TABULAR_NONE)}
         ]
        [ num_experiments INTEGER >= 0 {N_rem(sizet,numExperiments)} ]
        [ num_config_variables INTEGER >= 0 {N_rem(sizet,numExpConfigVars)} ]
        [ experiment_variance_type ALIAS variance_type STRINGLIST LEN1 calibration_terms {N_rem(strL,varianceType)} ]
       )
     ]
    [ simulation_variance REALLIST LEN1 calibration_terms {N_rem(RealL,simVariance)} ]
    [ nonlinear_inequality_constraints ALIAS num_nonlinear_inequality_constraints INTEGER >= 0 {N_rem(sizet,numNonlinearIneqConstraints)}
      [ lower_bounds ALIAS nonlinear_inequality_lower_bounds REALLIST LEN nonlinear_inequality_constraints {N_rem(RealDL,nonlinearIneqLowerBnds)} ]
      [ upper_bounds ALIAS nonlinear_inequality_upper_bounds REALLIST LEN nonlinear_inequality_constraints {N_rem(RealDL,nonlinearIneqUpperBnds)} ]
      [ scale_types ALIAS nonlinear_inequality_scale_types STRINGLIST LEN1 nonlinear_inequality_constraints {N_rem(strL,nonlinearIneqScaleTypes)} ]
      [ scales ALIAS nonlinear_inequality_scales REALLIST LEN1 nonlinear_inequality_constraints {N_rem(RealDL,nonlinearIneqScales)} ]
     ]
    [ nonlinear_equality_constraints ALIAS num_nonlinear_equality_constraints INTEGER >= 0 {N_rem(sizet,numNonlinearEqConstraints)}
      [ targets ALIAS nonlinear_equality_targets REALLIST LEN nonlinear_equality_constraints {N_rem(RealDL,nonlinearEqTargets)} ]
      [ scale_types ALIAS nonlinear_equality_scale_types STRINGLIST LEN1 nonlinear_equality_constraints {N_rem(strL,nonlinearEqScaleTypes)} ]
      [ scales ALIAS nonlinear_equality_scales REALLIST LEN1 nonlinear_equality_constraints {N_rem(RealDL,nonlinearEqScales)} ]
     ]
   )
  |
  ( response_functions ALIAS num_response_functions INTEGER >= 0 {N_rem(sizet,numResponseFunctions)}
    [ scalar_responses ALIAS num_scalar_responses INTEGER >= 0 {N_rem(sizet,numScalarResponseFunctions)} ]
    [ field_responses ALIAS num_field_responses INTEGER >= 0 {N_rem(sizet,numFieldResponseFunctions)}
      lengths INTEGERLIST LEN field_responses {N_rem(ivec,fieldLengths)}
      [ num_coordinates_per_field INTEGERLIST {N_rem(ivec,numCoordsPerField)} ]
      [ read_field_coordinates {N_rem(true,readFieldCoords)} ]
     ]
   )
  no_gradients {N_rem(lit,gradientType_none)}
  |
  analytic_gradients {N_rem(lit,gradientType_analytic)}
  |
  ( mixed_gradients {N_rem(lit,gradientType_mixed)}
    id_numerical_gradients INTEGERLIST {N_rem(intset,idNumericalGrads)}
    id_analytic_gradients INTEGERLIST {N_rem(intset,idAnalyticGrads)}
    [ method_source {0} ]
    [ 
      ( dakota {N_rem(lit,methodSource_dakota)}
        [ ignore_bounds {N_rem(true,ignoreBounds)} ]
        [ 
          relative {N_rem(lit,fdGradStepType_relative)}
          |
          absolute {N_rem(lit,fdGradStepType_absolute)}
          |
          bounds {N_rem(lit,fdGradStepType_bounds)}
         ]
       )
      |
      vendor {N_rem(lit,methodSource_vendor)}
     ]
    [ interval_type {0} ]
    [ 
      forward {N_rem(lit,intervalType_forward)}
      |
      central {N_rem(lit,intervalType_central)}
     ]
    [ fd_step_size ALIAS fd_gradient_step_size REALLIST {N_rem(RealL,fdGradStepSize)} ]
   )
  |
  ( numerical_gradients {N_rem(lit,gradientType_numerical)}
    [ method_source {0} ]
    [ 
      ( dakota {N_rem(lit,methodSource_dakota)}
        [ ignore_bounds {N_rem(true,ignoreBounds)} ]
        [ 
          relative {N_rem(lit,fdGradStepType_relative)}
          |
          absolute {N_rem(lit,fdGradStepType_absolute)}
          |
          bounds {N_rem(lit,fdGradStepType_bounds)}
         ]
       )
      |
      vendor {N_rem(lit,methodSource_vendor)}
     ]
    [ interval_type {0} ]
    [ 
      forward {N_rem(lit,intervalType_forward)}
      |
      central {N_rem(lit,intervalType_central)}
     ]
    [ fd_step_size ALIAS fd_gradient_step_size REALLIST {N_rem(RealL,fdGradStepSize)} ]
   )
  no_hessians {N_rem(lit,hessianType_none)}
  |
  ( numerical_hessians {N_rem(lit,hessianType_numerical)}
    [ fd_step_size ALIAS fd_hessian_step_size REALLIST {N_rem(RealL,fdHessStepSize)} ]
    [ 
      relative {N_rem(lit,fdHessStepType_relative)}
      |
      absolute {N_rem(lit,fdHessStepType_absolute)}
      |
      bounds {N_rem(lit,fdHessStepType_bounds)}
     ]
    [ 
      forward {N_rem(false,centralHess)}
      |
      central {N_rem(true,centralHess)}
     ]
   )
  |
  ( quasi_hessians {N_rem(lit,hessianType_quasi)}
    ( bfgs {N_rem(lit,quasiHessianType_bfgs)}
      [ damped {N_rem(lit,quasiHessianType_damped_bfgs)} ]
     )
    |
    sr1 {N_rem(lit,quasiHessianType_sr1)}
   )
  |
  analytic_hessians {N_rem(lit,hessianType_analytic)}
  |
  ( mixed_hessians {N_rem(lit,hessianType_mixed)}
    [ id_numerical_hessians INTEGERLIST {N_rem(intset,idNumericalHessians)}
      [ fd_step_size ALIAS fd_hessian_step_size REALLIST {N_rem(RealL,fdHessStepSize)} ]
     ]
    [ 
      relative {N_rem(lit,fdHessStepType_relative)}
      |
      absolute {N_rem(lit,fdHessStepType_absolute)}
      |
      bounds {N_rem(lit,fdHessStepType_bounds)}
     ]
    [ 
      forward {N_rem(false,centralHess)}
      |
      central {N_rem(true,centralHess)}
     ]
    [ id_quasi_hessians INTEGERLIST {N_rem(intset,idQuasiHessians)}
      ( bfgs {N_rem(lit,quasiHessianType_bfgs)}
        [ damped {N_rem(lit,quasiHessianType_damped_bfgs)} ]
       )
      |
      sr1 {N_rem(lit,quasiHessianType_sr1)}
     ]
    [ id_analytic_hessians INTEGERLIST {N_rem(intset,idAnalyticHessians)} ]
   )
  [ metadata STRINGLIST {N_rem(strL,metadataLabels)} ]

