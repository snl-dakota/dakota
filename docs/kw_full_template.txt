Blurb::
TEMPLATE See guidelines for blub below.

Description::

For the blurb:
Keep it short, say 3-10 words.  Some keywords require “arguments” 
(real number, string, list of reals or strings, etc). For these, blurb should 
begin with a noun and define the information that the user should provide to 
Dakota.	 Example--method-sampling-samples: Number of samples for sampling-based
methods.  Example--method-sampling-model_pointer: Identifier for model block to 
be used by a method.  For keywords that do not require “arguments”, blurb 
should be in a verb form that answers the question “What does Dakota do if I 
specify this keyword?”  Example--method: Begins Dakota method selection and 
behavioral settings.  Example--method-sampling-sample_type-random: Uses 
Monte-Carlo sampling.  Try to provide a hint of context…not always easy to do 
concisely.  Example--method-sampling-variance_based_decomp: Activates global 
sensitivity analysis based on decomposition of response variance into 
contributions from variables.  “Anti” example--max_step: Max change in design 
point (note lack of optimization context).  To the extent possible, avoid 
using the keyword to define itself.  Note that there are some cases where this 
doesn’t make sense.  “Anti” example--importance_sampling: Importance sampling.

For the description:

Insert brief description.  Treat this as an extended blurb.
It should still be relatively short, say 2-3 sentences that
expand on what was hinted at in the blurb.  Example--lhs: The
lhs keyword invokes Latin Hypercube Sampling as the means of
drawing samples of uncertain variables according to their probability
distributions. This is a stratified, space-filling approach that
selects variable values from a set of equi-probable bins.

*Default Behavior*

(For keywords with arguments, include the default value.
For keywords without arguments, include whether it defaults to “on” or “off”.
Include other keywords that must be used simultaneously.  Include variable 
types operated on by default.  Include valid response types.  Etc…
Example--sampling: By default, sampling methods operate on aleatory and 
epistemic uncertain variables. The types of variables can be restricted 
or expanded (to include design or state variables) through use of the active 
keyword in the variables block in the Dakota input file. If continuous design 
and/or state variables are designated as active, the sampling algorithm will 
treat them as parameters with uniform probability distributions between their 
upper and lower bounds.)

*Expected Output*

(This should describe what information Dakota will provide as a 
result of using this keyword and where to find it (e.g., screen, what file).
This is not valid for all keywords, so omit when appropriate.
Example--variance_based_decomp: When variance_based_decomp is specified, 
sensitivity indices for main effects and total effects will be reported. 
Main effects (roughly) represent the percent contribution of each individual 
variable to the variance in the model response. Total effects represent the 
percent contribution of each individual variable in combination with all other 
variables to the variance in the model response.)

*Usage Tips*

(Include any rules of thumb for when to use the keyword and how to 
set it.  We don’t necessarily have this for all keywords at this point, so 
omit as needed.  Example--variance_based_decomp: To obtain sensitivity indices 
that are reasonably accurate, we recommend that N, the number of samples, be 
at least one hundred and preferably several hundred or thousands.)

*Additional Discussion*

(Optional.  Put it here or in the Theory block.  If not here, remove 
header.)

Topics::

Examples::
(Include at least one example, preferably a full Dakota input file.
Partial file, e.g., a single input block, is OK if syntax is really simple and 
there’s nothing more to illustrate.  If this is the case, pointers to related 
examples may be helpful.  If syntax is complicated, add some explanatory text.
If expected output needs explanation, show it and include explanation pointing 
out things to look for.)

Theory::

Faq::

See_Also::
