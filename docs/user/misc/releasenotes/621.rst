.. _releasenotes-621:

""""""""""""""""""""""""""""""""""""""
Version 6.21 (2024/11/15)
""""""""""""""""""""""""""""""""""""""

**Highlight: New options for using MCMC algorithms from the MUQ library**

*Enabling / Accessing:* 

*Documentation:* 

**Highlight: JSON parameters and results files**

This release adds support for parameters and results files in JSON format, which
is intended to simplify driver development.

*Enabling / Accessing:* 

Two new keyword groups were added to the interface portion of the input file,
:dakkw:`interface-analysis_drivers-fork-parameters_format` and 
:dakkw:`interface-analysis_drivers-fork-results_format`. The ``json`` keyword within 
these groups is used to select JSON format files.

In addition, the :dakkw:`interface-analysis_drivers-fork-parameters_format-aprepro` 
keyword was moved to the ``parameters_format`` group, and the 
:dakkw:`interface-analysis_drivers-fork-results_format-standard-labeled` keyword
is now located in the ``results_format`` group.

*Documentation:* 

The User's Manual describes the schemas for JSON :ref:`parameters <variables:parameters:json>`
and :ref:`results <responses:results:json>` files.


**Highlight: MLMF Updates**

*Enabling / Accessing:* 

*Documentation:* 

**Improvements by Category**

*Interfaces, Input/Output*

- Writing evaluations by evaluation ID is supported by the :class:`BatchSplitter` class 
  in the :ref:`dakota.interfacing <interfaces:dakota.interfacing>` module.
- The :func:`python_interface` decorator in the 
  :ref:`dakota.interfacing <interfaces:dakota.interfacing>` module now supports batch evaluations.
- Support for reading and writing JSON parameters and results files was added to
  :ref:`dakota.interfacing <interfaces:dakota.interfacing>`.

*Models*

- Vector-valued Python surrogates now supported. Python surrogates now
  can provide Hessians.

*Optimization Methods*

*UQ Methods*

- MAP pre-solve and chain samples export enabled for muq methods

*MLMF Sampling*


 
**Miscellaneous Enhancements and Bugfixes**

- Enh: When building Dakota from source with the Python direct interface enabled, NumPy 2 is supported.
- Bug fix: JEGA global log file is closed when the environment is destructed.
- Bug fix: When performing batch evaluations with the Python direct interface, the evaluation ID is now
  correctly reported.

**Deprecated and Changed**

- The :dakkw:`interface-analysis_drivers-fork-parameters_format-aprepro` keyword was moved
  to the :dakkw:`interface-analysis_drivers-fork-parameters_format` group, and the 
  :dakkw:`interface-analysis_drivers-fork-results_format-standard-labeled` keyword is now 
  located in the :dakkw:`interface-analysis_drivers-fork-results_format`
  group.
- The legacy Python interface is no longer enabledin binary downloads. It is also disabled by
  default when building from source.
- The "eval_id" is in the direct Python parameters diciontary is now a string.

**Compatibility**

- Building Dakota from source now requires a C++14 compliant compiler.

**Other Notes and Known Issues**
